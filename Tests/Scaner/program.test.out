KEYWORLD 1 1 typedef
KEYWORLD 1 9 struct
IDENTIFICATOR 1 16 Node
SEPARATOR 1 20 {
KEYWORLD 2 2 struct
IDENTIFICATOR 2 9 Node
OPERATOR 2 13 *
IDENTIFICATOR 2 15 parent
SEPARATOR 2 21 ;
KEYWORLD 3 2 struct
IDENTIFICATOR 3 9 Node
OPERATOR 3 13 *
IDENTIFICATOR 3 15 left
SEPARATOR 3 19 ;
KEYWORLD 4 2 struct
IDENTIFICATOR 4 9 Node
OPERATOR 4 13 *
IDENTIFICATOR 4 15 right
SEPARATOR 4 20 ;
IDENTIFICATOR 5 2 LSQ_IntegerIndexT
IDENTIFICATOR 5 20 key
SEPARATOR 5 23 ;
IDENTIFICATOR 6 2 LSQ_BaseTypeT
IDENTIFICATOR 6 16 value
SEPARATOR 6 21 ;
KEYWORLD 7 2 int
IDENTIFICATOR 7 6 height
SEPARATOR 7 12 ;
SEPARATOR 8 1 }
IDENTIFICATOR 8 3 TypeNode
SEPARATOR 8 11 ;
KEYWORLD 10 1 typedef
KEYWORLD 10 9 struct
SEPARATOR 10 15 {
IDENTIFICATOR 11 2 TypeNode
OPERATOR 11 11 *
IDENTIFICATOR 11 12 root
SEPARATOR 11 16 ;
KEYWORLD 12 2 int
IDENTIFICATOR 12 6 size
SEPARATOR 12 10 ;
SEPARATOR 13 1 }
IDENTIFICATOR 13 3 TypeTree
SEPARATOR 13 11 ;
KEYWORLD 15 1 typedef
KEYWORLD 15 9 enum
SEPARATOR 15 13 {
IDENTIFICATOR 16 2 IS_BEFOR_FIRST
SEPARATOR 16 16 ,
IDENTIFICATOR 17 2 IS_PAST_REAR
SEPARATOR 17 14 ,
IDENTIFICATOR 18 2 IS_NORMAL
SEPARATOR 19 1 }
IDENTIFICATOR 19 2 TypeStateIterator
SEPARATOR 19 19 ;
KEYWORLD 21 1 typedef
KEYWORLD 21 9 struct
SEPARATOR 21 15 {
IDENTIFICATOR 22 2 TypeStateIterator
IDENTIFICATOR 22 20 state
SEPARATOR 22 25 ;
IDENTIFICATOR 23 2 TypeNode
OPERATOR 23 11 *
IDENTIFICATOR 23 12 node
SEPARATOR 23 16 ;
IDENTIFICATOR 24 2 TypeTree
OPERATOR 24 11 *
IDENTIFICATOR 24 12 tree
SEPARATOR 24 16 ;
SEPARATOR 25 1 }
IDENTIFICATOR 25 2 TypeIterator
SEPARATOR 25 14 ;
KEYWORLD 27 1 typedef
KEYWORLD 27 9 enum
SEPARATOR 27 13 {
IDENTIFICATOR 28 2 INSERT
SEPARATOR 28 8 ,
IDENTIFICATOR 29 2 DELETE
SEPARATOR 29 8 ,
IDENTIFICATOR 30 2 GET
SEPARATOR 31 1 }
IDENTIFICATOR 31 2 TypeAction
SEPARATOR 31 12 ;
KEYWORLD 34 1 static
KEYWORLD 34 8 int
IDENTIFICATOR 34 12 maxHeight
SEPARATOR 34 21 (
KEYWORLD 34 22 int
IDENTIFICATOR 34 26 a
SEPARATOR 34 27 ,
KEYWORLD 34 29 int
IDENTIFICATOR 34 33 b
SEPARATOR 34 34 )
SEPARATOR 34 35 {
KEYWORLD 35 2 return
SEPARATOR 35 8 (
IDENTIFICATOR 35 9 a
OPERATOR 35 11 >
IDENTIFICATOR 35 13 b
SEPARATOR 35 14 )
OPERATOR 35 15 ?
IDENTIFICATOR 35 17 a
OPERATOR 35 18 :
IDENTIFICATOR 35 20 b
SEPARATOR 35 21 ;
SEPARATOR 36 1 }
KEYWORLD 38 1 static
KEYWORLD 38 8 int
IDENTIFICATOR 38 12 GetNodeHeight
SEPARATOR 38 25 (
IDENTIFICATOR 38 26 TypeNode
OPERATOR 38 35 *
IDENTIFICATOR 38 36 node
SEPARATOR 38 40 )
SEPARATOR 38 41 {
KEYWORLD 39 2 return
SEPARATOR 39 8 (
IDENTIFICATOR 39 9 node
OPERATOR 39 14 ==
IDENTIFICATOR 39 17 NULL
SEPARATOR 39 21 )
OPERATOR 39 22 ?
INTEGER 39 24 0
OPERATOR 39 25 :
IDENTIFICATOR 39 27 node
OPERATOR 39 31 ->
IDENTIFICATOR 39 33 height
SEPARATOR 39 39 ;
SEPARATOR 40 1 }
KEYWORLD 42 1 static
KEYWORLD 42 8 int
IDENTIFICATOR 42 12 NodeBalanceFactor
SEPARATOR 42 29 (
IDENTIFICATOR 42 30 TypeNode
OPERATOR 42 38 *
IDENTIFICATOR 42 40 node
SEPARATOR 42 44 )
SEPARATOR 42 45 {
KEYWORLD 43 2 return
SEPARATOR 43 8 (
IDENTIFICATOR 43 9 GetNodeHeight
SEPARATOR 43 22 (
IDENTIFICATOR 43 23 node
OPERATOR 43 27 ->
IDENTIFICATOR 43 29 right
SEPARATOR 43 34 )
OPERATOR 43 35 -
IDENTIFICATOR 43 37 GetNodeHeight
SEPARATOR 43 50 (
IDENTIFICATOR 43 51 node
OPERATOR 43 55 ->
IDENTIFICATOR 43 57 left
SEPARATOR 43 61 )
SEPARATOR 43 62 )
SEPARATOR 43 63 ;
SEPARATOR 44 1 }
KEYWORLD 46 1 static
KEYWORLD 46 8 int
IDENTIFICATOR 46 12 UpdateNodeHeight
SEPARATOR 46 28 (
IDENTIFICATOR 46 29 TypeNode
OPERATOR 46 38 *
IDENTIFICATOR 46 39 node
SEPARATOR 46 43 )
SEPARATOR 46 44 {
IDENTIFICATOR 47 2 node
OPERATOR 47 6 ->
IDENTIFICATOR 47 8 height
OPERATOR 47 15 =
INTEGER 47 17 1
OPERATOR 47 19 +
IDENTIFICATOR 47 21 maxHeight
SEPARATOR 47 30 (
IDENTIFICATOR 47 31 GetNodeHeight
SEPARATOR 47 44 (
IDENTIFICATOR 47 45 node
OPERATOR 47 49 ->
IDENTIFICATOR 47 51 left
SEPARATOR 47 55 )
SEPARATOR 47 56 ,
IDENTIFICATOR 47 58 GetNodeHeight
SEPARATOR 47 71 (
IDENTIFICATOR 47 72 node
OPERATOR 47 76 ->
IDENTIFICATOR 47 78 right
SEPARATOR 47 83 )
SEPARATOR 47 84 )
SEPARATOR 47 85 ;
SEPARATOR 48 1 }
KEYWORLD 50 1 static
KEYWORLD 50 8 void
IDENTIFICATOR 50 13 NodeRotateLeft
SEPARATOR 50 27 (
IDENTIFICATOR 50 28 TypeTree
OPERATOR 50 37 *
IDENTIFICATOR 50 38 tree
SEPARATOR 50 42 ,
IDENTIFICATOR 50 44 TypeNode
OPERATOR 50 53 *
IDENTIFICATOR 50 54 node
SEPARATOR 50 58 )
SEPARATOR 50 59 {
IDENTIFICATOR 51 2 TypeNode
OPERATOR 51 11 *
IDENTIFICATOR 51 12 node2
OPERATOR 51 18 =
IDENTIFICATOR 51 20 node
OPERATOR 51 24 ->
IDENTIFICATOR 51 26 right
SEPARATOR 51 31 ;
KEYWORLD 52 2 if
SEPARATOR 52 4 (
IDENTIFICATOR 52 5 node
OPERATOR 52 10 ==
IDENTIFICATOR 52 13 NULL
SEPARATOR 52 17 )
KEYWORLD 53 3 return
SEPARATOR 53 9 ;
KEYWORLD 54 2 if
SEPARATOR 54 4 (
IDENTIFICATOR 54 5 node
OPERATOR 54 9 ->
IDENTIFICATOR 54 11 parent
OPERATOR 54 18 !
OPERATOR 54 19 =
IDENTIFICATOR 54 21 NULL
SEPARATOR 54 25 )
KEYWORLD 55 3 if
SEPARATOR 55 5 (
IDENTIFICATOR 55 6 node
OPERATOR 55 10 ->
IDENTIFICATOR 55 12 parent
OPERATOR 55 18 ->
IDENTIFICATOR 55 20 left
OPERATOR 55 25 ==
IDENTIFICATOR 55 28 node
SEPARATOR 55 32 )
IDENTIFICATOR 56 4 node
OPERATOR 56 8 ->
IDENTIFICATOR 56 10 parent
OPERATOR 56 16 ->
IDENTIFICATOR 56 18 left
OPERATOR 56 23 =
IDENTIFICATOR 56 25 node2
SEPARATOR 56 30 ;
KEYWORLD 57 3 else
IDENTIFICATOR 58 4 node
OPERATOR 58 8 ->
IDENTIFICATOR 58 10 parent
OPERATOR 58 16 ->
IDENTIFICATOR 58 18 right
OPERATOR 58 24 =
IDENTIFICATOR 58 26 node2
SEPARATOR 58 31 ;
KEYWORLD 59 2 else
IDENTIFICATOR 60 3 tree
OPERATOR 60 7 ->
IDENTIFICATOR 60 9 root
OPERATOR 60 14 =
IDENTIFICATOR 60 16 node2
SEPARATOR 60 21 ;
IDENTIFICATOR 61 2 node2
OPERATOR 61 7 ->
IDENTIFICATOR 61 9 parent
OPERATOR 61 16 =
IDENTIFICATOR 61 18 node
OPERATOR 61 22 ->
IDENTIFICATOR 61 24 parent
SEPARATOR 61 30 ;
IDENTIFICATOR 63 2 node
OPERATOR 63 6 ->
IDENTIFICATOR 63 8 right
OPERATOR 63 14 =
IDENTIFICATOR 63 16 node2
OPERATOR 63 21 ->
IDENTIFICATOR 63 23 left
SEPARATOR 63 27 ;
KEYWORLD 64 2 if
SEPARATOR 64 4 (
IDENTIFICATOR 64 5 node2
OPERATOR 64 10 ->
IDENTIFICATOR 64 12 left
OPERATOR 64 17 !
OPERATOR 64 18 =
IDENTIFICATOR 64 20 NULL
SEPARATOR 64 24 )
IDENTIFICATOR 65 3 node2
OPERATOR 65 8 ->
IDENTIFICATOR 65 10 left
OPERATOR 65 14 ->
IDENTIFICATOR 65 16 parent
OPERATOR 65 23 =
IDENTIFICATOR 65 25 node
SEPARATOR 65 29 ;
IDENTIFICATOR 67 2 node
OPERATOR 67 6 ->
IDENTIFICATOR 67 8 parent
OPERATOR 67 15 =
IDENTIFICATOR 67 17 node2
SEPARATOR 67 22 ;
IDENTIFICATOR 68 2 node2
OPERATOR 68 7 ->
IDENTIFICATOR 68 9 left
OPERATOR 68 14 =
IDENTIFICATOR 68 16 node
SEPARATOR 68 20 ;
IDENTIFICATOR 70 2 UpdateNodeHeight
SEPARATOR 70 18 (
IDENTIFICATOR 70 19 node
SEPARATOR 70 23 )
SEPARATOR 70 24 ;
IDENTIFICATOR 71 2 UpdateNodeHeight
SEPARATOR 71 18 (
IDENTIFICATOR 71 19 node2
SEPARATOR 71 24 )
SEPARATOR 71 25 ;
SEPARATOR 72 1 }
KEYWORLD 74 1 static
KEYWORLD 74 8 void
IDENTIFICATOR 74 13 NodeRotateRight
SEPARATOR 74 28 (
IDENTIFICATOR 74 29 TypeTree
OPERATOR 74 38 *
IDENTIFICATOR 74 39 tree
SEPARATOR 74 43 ,
IDENTIFICATOR 74 45 TypeNode
OPERATOR 74 54 *
IDENTIFICATOR 74 55 node
SEPARATOR 74 59 )
SEPARATOR 74 60 {
IDENTIFICATOR 75 2 TypeNode
OPERATOR 75 11 *
IDENTIFICATOR 75 12 node2
OPERATOR 75 18 =
IDENTIFICATOR 75 20 node
OPERATOR 75 24 ->
IDENTIFICATOR 75 26 left
SEPARATOR 75 30 ;
KEYWORLD 77 2 if
SEPARATOR 77 4 (
IDENTIFICATOR 77 5 node
OPERATOR 77 10 ==
IDENTIFICATOR 77 13 NULL
SEPARATOR 77 17 )
KEYWORLD 78 3 return
SEPARATOR 78 9 ;
KEYWORLD 79 2 if
SEPARATOR 79 4 (
IDENTIFICATOR 79 5 node
OPERATOR 79 9 ->
IDENTIFICATOR 79 11 parent
OPERATOR 79 18 !
OPERATOR 79 19 =
IDENTIFICATOR 79 21 NULL
SEPARATOR 79 25 )
KEYWORLD 80 3 if
SEPARATOR 80 5 (
IDENTIFICATOR 80 6 node
OPERATOR 80 10 ->
IDENTIFICATOR 80 12 parent
OPERATOR 80 18 ->
IDENTIFICATOR 80 20 left
OPERATOR 80 25 ==
IDENTIFICATOR 80 28 node
SEPARATOR 80 32 )
IDENTIFICATOR 81 4 node
OPERATOR 81 8 ->
IDENTIFICATOR 81 10 parent
OPERATOR 81 16 ->
IDENTIFICATOR 81 18 left
OPERATOR 81 23 =
IDENTIFICATOR 81 25 node2
SEPARATOR 81 30 ;
KEYWORLD 82 3 else
IDENTIFICATOR 83 4 node
OPERATOR 83 8 ->
IDENTIFICATOR 83 10 parent
OPERATOR 83 16 ->
IDENTIFICATOR 83 18 right
OPERATOR 83 24 =
IDENTIFICATOR 83 26 node2
SEPARATOR 83 31 ;
KEYWORLD 84 2 else
IDENTIFICATOR 85 3 tree
OPERATOR 85 7 ->
IDENTIFICATOR 85 9 root
OPERATOR 85 14 =
IDENTIFICATOR 85 16 node2
SEPARATOR 85 21 ;
IDENTIFICATOR 86 2 node2
OPERATOR 86 7 ->
IDENTIFICATOR 86 9 parent
OPERATOR 86 16 =
IDENTIFICATOR 86 18 node
OPERATOR 86 22 ->
IDENTIFICATOR 86 24 parent
SEPARATOR 86 30 ;
IDENTIFICATOR 88 2 node
OPERATOR 88 6 ->
IDENTIFICATOR 88 8 left
OPERATOR 88 13 =
IDENTIFICATOR 88 15 node2
OPERATOR 88 20 ->
IDENTIFICATOR 88 22 right
SEPARATOR 88 27 ;
KEYWORLD 89 2 if
SEPARATOR 89 4 (
IDENTIFICATOR 89 5 node2
OPERATOR 89 10 ->
IDENTIFICATOR 89 12 right
OPERATOR 89 18 !
OPERATOR 89 19 =
IDENTIFICATOR 89 21 NULL
SEPARATOR 89 25 )
IDENTIFICATOR 90 3 node2
OPERATOR 90 8 ->
IDENTIFICATOR 90 10 right
OPERATOR 90 15 ->
IDENTIFICATOR 90 17 parent
OPERATOR 90 24 =
IDENTIFICATOR 90 26 node
SEPARATOR 90 30 ;
IDENTIFICATOR 92 2 node
OPERATOR 92 6 ->
IDENTIFICATOR 92 8 parent
OPERATOR 92 15 =
IDENTIFICATOR 92 17 node2
SEPARATOR 92 22 ;
IDENTIFICATOR 93 2 node2
OPERATOR 93 7 ->
IDENTIFICATOR 93 9 right
OPERATOR 93 15 =
IDENTIFICATOR 93 17 node
SEPARATOR 93 21 ;
IDENTIFICATOR 95 2 UpdateNodeHeight
SEPARATOR 95 18 (
IDENTIFICATOR 95 19 node
SEPARATOR 95 23 )
SEPARATOR 95 24 ;
IDENTIFICATOR 96 2 UpdateNodeHeight
SEPARATOR 96 18 (
IDENTIFICATOR 96 19 node2
SEPARATOR 96 24 )
SEPARATOR 96 25 ;
SEPARATOR 97 1 }
KEYWORLD 99 1 static
KEYWORLD 99 8 void
IDENTIFICATOR 99 13 BalanceTree
SEPARATOR 99 24 (
IDENTIFICATOR 99 25 TypeTree
OPERATOR 99 34 *
IDENTIFICATOR 99 35 tree
SEPARATOR 99 39 ,
IDENTIFICATOR 99 41 TypeNode
OPERATOR 99 49 *
IDENTIFICATOR 99 51 node
SEPARATOR 99 55 ,
IDENTIFICATOR 99 57 TypeAction
IDENTIFICATOR 99 68 stop_criterion
SEPARATOR 99 82 )
SEPARATOR 99 83 {
IDENTIFICATOR 100 2 TypeNode
OPERATOR 100 10 *
IDENTIFICATOR 100 12 pnode
OPERATOR 100 18 =
IDENTIFICATOR 100 20 node
SEPARATOR 100 24 ;
KEYWORLD 101 2 int
IDENTIFICATOR 101 6 balanceFactor
OPERATOR 101 20 =
INTEGER 101 22 0
SEPARATOR 101 23 ;
KEYWORLD 103 2 while
SEPARATOR 103 7 (
IDENTIFICATOR 103 8 node
OPERATOR 103 13 !
OPERATOR 103 14 =
IDENTIFICATOR 103 16 NULL
SEPARATOR 103 20 )
SEPARATOR 103 21 {
IDENTIFICATOR 104 3 UpdateNodeHeight
SEPARATOR 104 19 (
IDENTIFICATOR 104 20 node
SEPARATOR 104 24 )
SEPARATOR 104 25 ;
IDENTIFICATOR 105 3 balanceFactor
OPERATOR 105 17 =
IDENTIFICATOR 105 19 NodeBalanceFactor
SEPARATOR 105 36 (
IDENTIFICATOR 105 37 node
SEPARATOR 105 41 )
SEPARATOR 105 42 ;
KEYWORLD 106 3 if
SEPARATOR 106 5 (
SEPARATOR 106 6 (
IDENTIFICATOR 106 7 TypeAction
SEPARATOR 106 17 )
IDENTIFICATOR 106 18 abs
SEPARATOR 106 21 (
IDENTIFICATOR 106 22 balanceFactor
SEPARATOR 106 35 )
OPERATOR 106 37 ==
IDENTIFICATOR 106 40 stop_criterion
SEPARATOR 106 54 )
KEYWORLD 107 4 return
SEPARATOR 107 10 ;
KEYWORLD 108 3 if
SEPARATOR 108 5 (
IDENTIFICATOR 108 6 balanceFactor
OPERATOR 108 20 ==
INTEGER 108 23 2
SEPARATOR 108 24 )
SEPARATOR 108 25 {
KEYWORLD 109 4 if
SEPARATOR 109 6 (
IDENTIFICATOR 109 7 NodeBalanceFactor
SEPARATOR 109 24 (
IDENTIFICATOR 109 25 node
OPERATOR 109 29 ->
IDENTIFICATOR 109 31 right
SEPARATOR 109 36 )
OPERATOR 109 38 <
INTEGER 109 40 0
SEPARATOR 109 41 )
IDENTIFICATOR 110 5 NodeRotateRight
SEPARATOR 110 20 (
IDENTIFICATOR 110 21 tree
SEPARATOR 110 25 ,
IDENTIFICATOR 110 27 node
OPERATOR 110 31 ->
IDENTIFICATOR 110 33 right
SEPARATOR 110 38 )
SEPARATOR 110 39 ;
IDENTIFICATOR 111 4 NodeRotateLeft
SEPARATOR 111 18 (
IDENTIFICATOR 111 19 tree
SEPARATOR 111 23 ,
IDENTIFICATOR 111 24 node
SEPARATOR 111 28 )
SEPARATOR 111 29 ;
SEPARATOR 112 3 }
KEYWORLD 113 3 else
KEYWORLD 114 4 if
SEPARATOR 114 6 (
IDENTIFICATOR 114 7 balanceFactor
OPERATOR 114 21 ==
OPERATOR 114 24 -
INTEGER 114 25 2
SEPARATOR 114 26 )
SEPARATOR 114 27 {
KEYWORLD 115 5 if
SEPARATOR 115 7 (
IDENTIFICATOR 115 8 NodeBalanceFactor
SEPARATOR 115 25 (
IDENTIFICATOR 115 26 node
OPERATOR 115 30 ->
IDENTIFICATOR 115 32 left
SEPARATOR 115 36 )
OPERATOR 115 38 >
INTEGER 115 40 0
SEPARATOR 115 41 )
IDENTIFICATOR 116 17 NodeRotateLeft
SEPARATOR 116 31 (
IDENTIFICATOR 116 32 tree
SEPARATOR 116 36 ,
IDENTIFICATOR 116 38 node
OPERATOR 116 42 ->
IDENTIFICATOR 116 44 left
SEPARATOR 116 48 )
SEPARATOR 116 49 ;
IDENTIFICATOR 117 13 NodeRotateRight
SEPARATOR 117 28 (
IDENTIFICATOR 117 29 tree
SEPARATOR 117 33 ,
IDENTIFICATOR 117 35 node
SEPARATOR 117 39 )
SEPARATOR 117 40 ;
SEPARATOR 118 4 }
IDENTIFICATOR 119 3 node
OPERATOR 119 8 =
IDENTIFICATOR 119 10 node
OPERATOR 119 14 ->
IDENTIFICATOR 119 16 parent
SEPARATOR 119 22 ;
SEPARATOR 120 2 }
SEPARATOR 121 1 }
KEYWORLD 123 1 static
IDENTIFICATOR 124 8 TypeNode
OPERATOR 124 16 *
IDENTIFICATOR 124 18 CreateNode
SEPARATOR 124 28 (
IDENTIFICATOR 124 29 TypeNode
OPERATOR 124 38 *
IDENTIFICATOR 124 39 parant
SEPARATOR 124 45 ,
IDENTIFICATOR 124 47 LSQ_IntegerIndexT
IDENTIFICATOR 124 65 key
SEPARATOR 124 68 ,
IDENTIFICATOR 124 70 LSQ_BaseTypeT
IDENTIFICATOR 124 84 value
SEPARATOR 124 89 )
SEPARATOR 124 90 {
IDENTIFICATOR 125 2 TypeNode
OPERATOR 125 11 *
IDENTIFICATOR 125 12 node
OPERATOR 125 17 =
SEPARATOR 125 19 (
IDENTIFICATOR 125 20 TypeNode
OPERATOR 125 28 *
SEPARATOR 125 29 )
IDENTIFICATOR 125 30 malloc
SEPARATOR 125 36 (
KEYWORLD 125 37 sizeof
SEPARATOR 125 43 (
IDENTIFICATOR 125 44 TypeNode
SEPARATOR 125 52 )
SEPARATOR 125 53 )
SEPARATOR 125 54 ;
KEYWORLD 127 2 if
SEPARATOR 127 4 (
IDENTIFICATOR 127 5 node
OPERATOR 127 10 ==
IDENTIFICATOR 127 13 NULL
SEPARATOR 127 17 )
KEYWORLD 128 3 return
SEPARATOR 128 9 (
IDENTIFICATOR 128 10 NULL
SEPARATOR 128 14 )
SEPARATOR 128 15 ;
IDENTIFICATOR 129 2 node
OPERATOR 129 6 ->
IDENTIFICATOR 129 8 key
OPERATOR 129 12 =
IDENTIFICATOR 129 14 key
SEPARATOR 129 17 ;
IDENTIFICATOR 130 2 node
OPERATOR 130 6 ->
IDENTIFICATOR 130 8 left
OPERATOR 130 13 =
IDENTIFICATOR 130 15 NULL
SEPARATOR 130 19 ;
IDENTIFICATOR 131 2 node
OPERATOR 131 6 ->
IDENTIFICATOR 131 8 parent
OPERATOR 131 15 =
IDENTIFICATOR 131 17 parant
SEPARATOR 131 23 ;
IDENTIFICATOR 132 2 node
OPERATOR 132 6 ->
IDENTIFICATOR 132 8 right
OPERATOR 132 14 =
IDENTIFICATOR 132 16 NULL
SEPARATOR 132 20 ;
IDENTIFICATOR 133 2 node
OPERATOR 133 6 ->
IDENTIFICATOR 133 8 value
OPERATOR 133 14 =
IDENTIFICATOR 133 16 value
SEPARATOR 133 21 ;
IDENTIFICATOR 134 2 node
OPERATOR 134 6 ->
IDENTIFICATOR 134 8 height
OPERATOR 134 15 =
INTEGER 134 17 1
SEPARATOR 134 18 ;
KEYWORLD 135 2 return
SEPARATOR 135 8 (
IDENTIFICATOR 135 9 node
SEPARATOR 135 13 )
SEPARATOR 135 14 ;
SEPARATOR 136 1 }
KEYWORLD 137 1 static
KEYWORLD 138 8 void
IDENTIFICATOR 138 13 FreeTreeNode
SEPARATOR 138 25 (
IDENTIFICATOR 138 26 TypeNode
OPERATOR 138 34 *
IDENTIFICATOR 138 36 node
SEPARATOR 138 40 )
SEPARATOR 138 41 {
KEYWORLD 139 2 if
SEPARATOR 139 4 (
IDENTIFICATOR 139 5 node
OPERATOR 139 10 ==
IDENTIFICATOR 139 13 NULL
SEPARATOR 139 17 )
KEYWORLD 140 3 return
SEPARATOR 140 9 ;
IDENTIFICATOR 141 2 FreeTreeNode
SEPARATOR 141 14 (
IDENTIFICATOR 141 15 node
OPERATOR 141 19 ->
IDENTIFICATOR 141 21 left
SEPARATOR 141 25 )
SEPARATOR 141 26 ;
IDENTIFICATOR 142 2 FreeTreeNode
SEPARATOR 142 14 (
IDENTIFICATOR 142 15 node
OPERATOR 142 19 ->
IDENTIFICATOR 142 21 right
SEPARATOR 142 26 )
SEPARATOR 142 27 ;
IDENTIFICATOR 143 2 free
SEPARATOR 143 6 (
IDENTIFICATOR 143 7 node
SEPARATOR 143 11 )
SEPARATOR 143 12 ;
SEPARATOR 144 1 }
KEYWORLD 145 1 static
IDENTIFICATOR 146 8 TypeNode
OPERATOR 146 16 *
IDENTIFICATOR 146 18 GetNodeByKey
SEPARATOR 146 30 (
IDENTIFICATOR 146 31 TypeTree
OPERATOR 146 39 *
IDENTIFICATOR 146 41 handle
SEPARATOR 146 47 ,
IDENTIFICATOR 146 49 LSQ_IntegerIndexT
IDENTIFICATOR 146 67 key
SEPARATOR 146 70 ,
IDENTIFICATOR 146 72 TypeAction
IDENTIFICATOR 146 83 operation
SEPARATOR 146 92 )
SEPARATOR 146 93 {
IDENTIFICATOR 147 2 TypeNode
OPERATOR 147 11 *
IDENTIFICATOR 147 12 node
OPERATOR 147 17 =
IDENTIFICATOR 147 19 NULL
SEPARATOR 147 23 ,
OPERATOR 147 25 *
IDENTIFICATOR 147 26 pnode
OPERATOR 147 32 =
IDENTIFICATOR 147 34 NULL
SEPARATOR 147 38 ;
KEYWORLD 148 2 if
SEPARATOR 148 4 (
IDENTIFICATOR 148 5 handle
OPERATOR 148 12 ==
IDENTIFICATOR 148 15 NULL
SEPARATOR 148 19 )
KEYWORLD 149 3 return
SEPARATOR 149 9 (
IDENTIFICATOR 149 10 NULL
SEPARATOR 149 14 )
SEPARATOR 149 15 ;
IDENTIFICATOR 151 2 node
OPERATOR 151 7 =
SEPARATOR 151 9 (
IDENTIFICATOR 151 10 handle
SEPARATOR 151 16 )
OPERATOR 151 17 ->
IDENTIFICATOR 151 19 root
SEPARATOR 151 23 ;
KEYWORLD 152 2 while
SEPARATOR 152 7 (
IDENTIFICATOR 152 8 node
OPERATOR 152 13 !
OPERATOR 152 14 =
IDENTIFICATOR 152 16 NULL
SEPARATOR 152 20 )
SEPARATOR 152 21 {
KEYWORLD 153 3 if
SEPARATOR 153 5 (
IDENTIFICATOR 153 6 operation
OPERATOR 153 16 ==
IDENTIFICATOR 153 19 INSERT
SEPARATOR 153 25 )
IDENTIFICATOR 154 4 pnode
OPERATOR 154 10 =
IDENTIFICATOR 154 12 node
SEPARATOR 154 16 ;
KEYWORLD 155 3 if
SEPARATOR 155 5 (
IDENTIFICATOR 155 6 key
OPERATOR 155 10 <
IDENTIFICATOR 155 12 node
OPERATOR 155 16 ->
IDENTIFICATOR 155 18 key
SEPARATOR 155 21 )
IDENTIFICATOR 156 4 node
OPERATOR 156 9 =
IDENTIFICATOR 156 11 node
OPERATOR 156 15 ->
IDENTIFICATOR 156 17 left
SEPARATOR 156 21 ;
KEYWORLD 157 3 else
KEYWORLD 158 4 if
SEPARATOR 158 6 (
IDENTIFICATOR 158 7 key
OPERATOR 158 11 >
IDENTIFICATOR 158 13 node
OPERATOR 158 17 ->
IDENTIFICATOR 158 19 key
SEPARATOR 158 22 )
IDENTIFICATOR 159 5 node
OPERATOR 159 10 =
IDENTIFICATOR 159 12 node
OPERATOR 159 16 ->
IDENTIFICATOR 159 18 right
SEPARATOR 159 23 ;
KEYWORLD 160 4 else
KEYWORLD 161 5 break
SEPARATOR 161 10 ;
SEPARATOR 162 2 }
KEYWORLD 164 2 if
SEPARATOR 164 4 (
IDENTIFICATOR 164 5 operation
OPERATOR 164 15 ==
IDENTIFICATOR 164 18 INSERT
OPERATOR 164 25 &&
IDENTIFICATOR 164 28 node
OPERATOR 164 33 ==
IDENTIFICATOR 164 36 NULL
SEPARATOR 164 40 )
SEPARATOR 164 41 {
IDENTIFICATOR 165 3 node
OPERATOR 165 8 =
IDENTIFICATOR 165 10 CreateNode
SEPARATOR 165 20 (
IDENTIFICATOR 165 21 pnode
SEPARATOR 165 26 ,
IDENTIFICATOR 165 28 key
SEPARATOR 165 31 ,
INTEGER 165 33 0
SEPARATOR 165 34 )
SEPARATOR 165 35 ;
IDENTIFICATOR 166 3 handle
OPERATOR 166 9 ->
IDENTIFICATOR 166 11 size
OPERATOR 166 15 ++
SEPARATOR 166 17 ;
KEYWORLD 167 3 if
SEPARATOR 167 5 (
IDENTIFICATOR 167 6 key
OPERATOR 167 10 <
IDENTIFICATOR 167 12 pnode
OPERATOR 167 17 ->
IDENTIFICATOR 167 19 key
SEPARATOR 167 22 )
IDENTIFICATOR 168 4 pnode
OPERATOR 168 9 ->
IDENTIFICATOR 168 11 left
OPERATOR 168 16 =
IDENTIFICATOR 168 18 node
SEPARATOR 168 22 ;
KEYWORLD 169 3 else
IDENTIFICATOR 170 4 pnode
OPERATOR 170 9 ->
IDENTIFICATOR 170 11 right
OPERATOR 170 17 =
IDENTIFICATOR 170 19 node
SEPARATOR 170 23 ;
SEPARATOR 171 2 }
KEYWORLD 172 2 return
SEPARATOR 172 8 (
IDENTIFICATOR 172 9 node
SEPARATOR 172 13 )
SEPARATOR 172 14 ;
SEPARATOR 173 1 }
KEYWORLD 175 1 static
IDENTIFICATOR 176 8 TypeNode
OPERATOR 176 16 *
IDENTIFICATOR 176 18 GetLeftMostNode
SEPARATOR 176 33 (
IDENTIFICATOR 176 34 TypeNode
OPERATOR 176 43 *
IDENTIFICATOR 176 44 root
SEPARATOR 176 48 )
SEPARATOR 176 49 {
IDENTIFICATOR 177 2 TypeNode
OPERATOR 177 11 *
IDENTIFICATOR 177 12 node
OPERATOR 177 17 =
IDENTIFICATOR 177 19 root
SEPARATOR 177 23 ;
KEYWORLD 179 2 if
SEPARATOR 179 4 (
IDENTIFICATOR 179 5 root
OPERATOR 179 10 ==
IDENTIFICATOR 179 13 NULL
SEPARATOR 179 17 )
KEYWORLD 180 3 return
SEPARATOR 180 9 (
IDENTIFICATOR 180 10 NULL
SEPARATOR 180 14 )
SEPARATOR 180 15 ;
KEYWORLD 181 2 while
SEPARATOR 181 7 (
IDENTIFICATOR 181 8 node
OPERATOR 181 12 ->
IDENTIFICATOR 181 14 left
OPERATOR 181 19 !
OPERATOR 181 20 =
IDENTIFICATOR 181 22 NULL
SEPARATOR 181 26 )
IDENTIFICATOR 182 3 node
OPERATOR 182 8 =
IDENTIFICATOR 182 10 node
OPERATOR 182 14 ->
IDENTIFICATOR 182 16 left
SEPARATOR 182 20 ;
KEYWORLD 183 2 return
SEPARATOR 183 8 (
IDENTIFICATOR 183 9 node
SEPARATOR 183 13 )
SEPARATOR 183 14 ;
SEPARATOR 184 1 }
KEYWORLD 186 1 static
IDENTIFICATOR 187 8 TypeNode
OPERATOR 187 16 *
IDENTIFICATOR 187 18 GetRightMostNode
SEPARATOR 187 34 (
IDENTIFICATOR 187 35 TypeNode
OPERATOR 187 44 *
IDENTIFICATOR 187 45 root
SEPARATOR 187 49 )
SEPARATOR 187 50 {
IDENTIFICATOR 188 2 TypeNode
OPERATOR 188 11 *
IDENTIFICATOR 188 12 node
OPERATOR 188 17 =
IDENTIFICATOR 188 19 root
SEPARATOR 188 23 ;
KEYWORLD 190 2 if
SEPARATOR 190 4 (
IDENTIFICATOR 190 5 root
OPERATOR 190 10 ==
IDENTIFICATOR 190 13 NULL
SEPARATOR 190 17 )
KEYWORLD 191 3 return
SEPARATOR 191 9 (
IDENTIFICATOR 191 10 NULL
SEPARATOR 191 14 )
SEPARATOR 191 15 ;
KEYWORLD 192 2 while
SEPARATOR 192 7 (
IDENTIFICATOR 192 8 node
OPERATOR 192 12 ->
IDENTIFICATOR 192 14 right
OPERATOR 192 20 !
OPERATOR 192 21 =
IDENTIFICATOR 192 23 NULL
SEPARATOR 192 27 )
IDENTIFICATOR 193 3 node
OPERATOR 193 8 =
IDENTIFICATOR 193 10 node
OPERATOR 193 14 ->
IDENTIFICATOR 193 16 right
SEPARATOR 193 21 ;
KEYWORLD 194 2 return
SEPARATOR 194 8 (
IDENTIFICATOR 194 9 node
SEPARATOR 194 13 )
SEPARATOR 194 14 ;
SEPARATOR 195 1 }
IDENTIFICATOR 197 1 LSQ_HandleT
IDENTIFICATOR 198 13 LSQ_CreateSequence
SEPARATOR 198 31 (
KEYWORLD 198 32 void
SEPARATOR 198 36 )
SEPARATOR 198 37 {
IDENTIFICATOR 199 2 TypeTree
OPERATOR 199 10 *
IDENTIFICATOR 199 12 tree
OPERATOR 199 17 =
SEPARATOR 199 19 (
IDENTIFICATOR 199 20 TypeTree
OPERATOR 199 28 *
SEPARATOR 199 29 )
IDENTIFICATOR 199 30 malloc
SEPARATOR 199 36 (
KEYWORLD 199 37 sizeof
SEPARATOR 199 43 (
IDENTIFICATOR 199 44 TypeTree
SEPARATOR 199 52 )
SEPARATOR 199 53 )
SEPARATOR 199 54 ;
KEYWORLD 201 2 if
SEPARATOR 201 4 (
IDENTIFICATOR 201 5 tree
OPERATOR 201 10 ==
IDENTIFICATOR 201 13 NULL
SEPARATOR 201 17 )
KEYWORLD 202 3 return
SEPARATOR 202 9 (
IDENTIFICATOR 202 10 LSQ_HandleInvalid
SEPARATOR 202 27 )
SEPARATOR 202 28 ;
IDENTIFICATOR 203 2 tree
OPERATOR 203 6 ->
IDENTIFICATOR 203 8 root
OPERATOR 203 13 =
IDENTIFICATOR 203 15 NULL
SEPARATOR 203 19 ;
IDENTIFICATOR 204 2 tree
OPERATOR 204 6 ->
IDENTIFICATOR 204 8 size
OPERATOR 204 13 =
INTEGER 204 15 0
SEPARATOR 204 16 ;
KEYWORLD 205 2 return
SEPARATOR 205 8 (
IDENTIFICATOR 205 9 tree
SEPARATOR 205 13 )
SEPARATOR 205 14 ;
SEPARATOR 206 1 }
KEYWORLD 208 1 void
IDENTIFICATOR 209 6 LSQ_DestroySequence
SEPARATOR 209 25 (
IDENTIFICATOR 209 26 LSQ_HandleT
IDENTIFICATOR 209 38 handle
SEPARATOR 209 44 )
SEPARATOR 209 45 {
KEYWORLD 210 2 if
SEPARATOR 210 4 (
IDENTIFICATOR 210 5 handle
OPERATOR 210 12 ==
IDENTIFICATOR 210 15 NULL
SEPARATOR 210 19 )
KEYWORLD 211 3 return
SEPARATOR 211 9 ;
IDENTIFICATOR 212 2 FreeTreeNode
SEPARATOR 212 14 (
IDENTIFICATOR 212 15 SEQ
SEPARATOR 212 18 (
IDENTIFICATOR 212 19 handle
SEPARATOR 212 25 )
OPERATOR 212 26 ->
IDENTIFICATOR 212 28 root
SEPARATOR 212 32 )
SEPARATOR 212 33 ;
IDENTIFICATOR 213 2 free
SEPARATOR 213 6 (
IDENTIFICATOR 213 7 handle
SEPARATOR 213 13 )
SEPARATOR 213 14 ;
SEPARATOR 214 1 }
IDENTIFICATOR 216 1 LSQ_IntegerIndexT
IDENTIFICATOR 217 19 LSQ_GetSize
SEPARATOR 217 30 (
IDENTIFICATOR 217 31 LSQ_HandleT
IDENTIFICATOR 217 43 handle
SEPARATOR 217 49 )
SEPARATOR 217 50 {
KEYWORLD 218 2 return
SEPARATOR 218 8 (
IDENTIFICATOR 218 9 handle
OPERATOR 218 16 ==
IDENTIFICATOR 218 19 NULL
SEPARATOR 218 23 )
OPERATOR 218 24 ?
INTEGER 218 26 0
OPERATOR 218 27 :
SEPARATOR 218 28 (
IDENTIFICATOR 218 29 SEQ
SEPARATOR 218 32 (
IDENTIFICATOR 218 33 handle
SEPARATOR 218 39 )
OPERATOR 218 40 ->
IDENTIFICATOR 218 42 size
SEPARATOR 218 46 )
SEPARATOR 218 47 ;
SEPARATOR 219 1 }
KEYWORLD 221 1 int
IDENTIFICATOR 222 5 LSQ_IsIteratorDereferencable
SEPARATOR 222 33 (
IDENTIFICATOR 222 34 LSQ_IteratorT
IDENTIFICATOR 222 48 iterator
SEPARATOR 222 56 )
SEPARATOR 222 57 {
KEYWORLD 223 2 return
SEPARATOR 223 8 (
IDENTIFICATOR 223 9 iterator
OPERATOR 223 18 !
OPERATOR 223 19 =
IDENTIFICATOR 223 21 NULL
OPERATOR 223 26 &&
IDENTIFICATOR 223 29 ITR
SEPARATOR 223 32 (
IDENTIFICATOR 223 33 iterator
SEPARATOR 223 41 )
OPERATOR 223 42 ->
IDENTIFICATOR 223 44 state
OPERATOR 223 50 ==
IDENTIFICATOR 223 53 IS_NORMAL
SEPARATOR 223 62 )
SEPARATOR 223 63 ;
SEPARATOR 224 1 }
KEYWORLD 226 1 int
IDENTIFICATOR 227 5 LSQ_IsIteratorPastRear
SEPARATOR 227 27 (
IDENTIFICATOR 227 28 LSQ_IteratorT
IDENTIFICATOR 227 42 iterator
SEPARATOR 227 50 )
SEPARATOR 227 51 {
KEYWORLD 228 2 return
SEPARATOR 228 8 (
IDENTIFICATOR 228 9 iterator
OPERATOR 228 18 !
OPERATOR 228 19 =
IDENTIFICATOR 228 21 NULL
OPERATOR 228 26 &&
IDENTIFICATOR 228 29 ITR
SEPARATOR 228 32 (
IDENTIFICATOR 228 33 iterator
SEPARATOR 228 41 )
OPERATOR 228 42 ->
IDENTIFICATOR 228 44 state
OPERATOR 228 50 ==
IDENTIFICATOR 228 53 IS_PAST_REAR
SEPARATOR 228 65 )
SEPARATOR 228 66 ;
SEPARATOR 229 1 }
KEYWORLD 231 1 int
IDENTIFICATOR 232 5 LSQ_IsIteratorBeforeFirst
SEPARATOR 232 30 (
IDENTIFICATOR 232 31 LSQ_IteratorT
IDENTIFICATOR 232 45 iterator
SEPARATOR 232 53 )
SEPARATOR 232 54 {
KEYWORLD 233 2 return
SEPARATOR 233 8 (
IDENTIFICATOR 233 9 iterator
OPERATOR 233 18 !
OPERATOR 233 19 =
IDENTIFICATOR 233 21 NULL
OPERATOR 233 26 &&
IDENTIFICATOR 233 29 ITR
SEPARATOR 233 32 (
IDENTIFICATOR 233 33 iterator
SEPARATOR 233 41 )
OPERATOR 233 42 ->
IDENTIFICATOR 233 44 state
OPERATOR 233 50 ==
IDENTIFICATOR 233 53 IS_BEFOR_FIRST
SEPARATOR 233 67 )
SEPARATOR 233 68 ;
SEPARATOR 234 1 }
IDENTIFICATOR 236 1 LSQ_BaseTypeT
OPERATOR 237 14 *
IDENTIFICATOR 237 16 LSQ_DereferenceIterator
SEPARATOR 237 39 (
IDENTIFICATOR 237 40 LSQ_IteratorT
IDENTIFICATOR 237 54 iterator
SEPARATOR 237 62 )
SEPARATOR 237 63 {
KEYWORLD 238 2 return
SEPARATOR 238 8 (
OPERATOR 238 9 !
IDENTIFICATOR 238 10 LSQ_IsIteratorDereferencable
SEPARATOR 238 38 (
IDENTIFICATOR 238 39 iterator
SEPARATOR 238 47 )
SEPARATOR 238 48 )
OPERATOR 238 49 ?
IDENTIFICATOR 238 51 NULL
OPERATOR 238 55 :
OPERATOR 238 57 &
SEPARATOR 238 58 (
IDENTIFICATOR 238 59 ITR
SEPARATOR 238 62 (
IDENTIFICATOR 238 63 iterator
SEPARATOR 238 71 )
OPERATOR 238 72 ->
IDENTIFICATOR 238 74 node
OPERATOR 238 78 ->
IDENTIFICATOR 238 80 value
SEPARATOR 238 85 )
SEPARATOR 238 86 ;
SEPARATOR 239 1 }
IDENTIFICATOR 241 1 LSQ_IntegerIndexT
IDENTIFICATOR 242 19 LSQ_GetIteratorKey
SEPARATOR 242 37 (
IDENTIFICATOR 242 38 LSQ_IteratorT
IDENTIFICATOR 242 52 iterator
SEPARATOR 242 60 )
SEPARATOR 242 61 {
KEYWORLD 243 2 return
SEPARATOR 243 8 (
OPERATOR 243 9 !
IDENTIFICATOR 243 10 LSQ_IsIteratorDereferencable
SEPARATOR 243 38 (
IDENTIFICATOR 243 39 iterator
SEPARATOR 243 47 )
SEPARATOR 243 48 )
OPERATOR 243 49 ?
INTEGER 243 51 0
OPERATOR 243 52 :
IDENTIFICATOR 243 54 ITR
SEPARATOR 243 57 (
IDENTIFICATOR 243 58 iterator
SEPARATOR 243 66 )
OPERATOR 243 67 ->
IDENTIFICATOR 243 69 node
OPERATOR 243 73 ->
IDENTIFICATOR 243 75 key
SEPARATOR 243 78 ;
SEPARATOR 244 1 }
IDENTIFICATOR 246 1 LSQ_IteratorT
IDENTIFICATOR 248 15 LSQ_GetElementByIndex
SEPARATOR 248 36 (
IDENTIFICATOR 248 37 LSQ_HandleT
IDENTIFICATOR 248 49 handle
SEPARATOR 248 55 ,
IDENTIFICATOR 248 57 LSQ_IntegerIndexT
IDENTIFICATOR 248 75 index
SEPARATOR 248 80 )
SEPARATOR 248 81 {
IDENTIFICATOR 249 2 TypeIterator
OPERATOR 249 15 *
IDENTIFICATOR 249 16 iterator
OPERATOR 249 25 =
IDENTIFICATOR 249 27 NULL
SEPARATOR 249 31 ;
IDENTIFICATOR 250 2 TypeNode
OPERATOR 250 11 *
IDENTIFICATOR 250 12 node
OPERATOR 250 17 =
IDENTIFICATOR 250 19 NULL
SEPARATOR 250 23 ;
KEYWORLD 252 2 if
SEPARATOR 252 4 (
IDENTIFICATOR 252 5 handle
OPERATOR 252 12 ==
IDENTIFICATOR 252 15 NULL
SEPARATOR 252 19 )
KEYWORLD 253 3 return
SEPARATOR 253 9 (
IDENTIFICATOR 253 10 NULL
SEPARATOR 253 14 )
SEPARATOR 253 15 ;
IDENTIFICATOR 255 2 node
OPERATOR 255 7 =
IDENTIFICATOR 255 9 GetNodeByKey
SEPARATOR 255 21 (
IDENTIFICATOR 255 22 SEQ
SEPARATOR 255 25 (
IDENTIFICATOR 255 26 handle
SEPARATOR 255 32 )
SEPARATOR 255 33 ,
IDENTIFICATOR 255 35 index
SEPARATOR 255 40 ,
IDENTIFICATOR 255 42 GET
SEPARATOR 255 45 )
SEPARATOR 255 46 ;
KEYWORLD 256 2 if
SEPARATOR 256 4 (
IDENTIFICATOR 256 5 node
OPERATOR 256 10 ==
IDENTIFICATOR 256 13 NULL
SEPARATOR 256 17 )
KEYWORLD 257 3 return
SEPARATOR 257 9 (
IDENTIFICATOR 257 10 LSQ_GetPastRearElement
SEPARATOR 257 32 (
IDENTIFICATOR 257 33 handle
SEPARATOR 257 39 )
SEPARATOR 257 40 )
SEPARATOR 257 41 ;
IDENTIFICATOR 259 2 iterator
OPERATOR 259 11 =
SEPARATOR 259 13 (
IDENTIFICATOR 259 14 TypeIterator
OPERATOR 259 26 *
SEPARATOR 259 27 )
IDENTIFICATOR 259 28 malloc
SEPARATOR 259 34 (
KEYWORLD 259 35 sizeof
SEPARATOR 259 41 (
IDENTIFICATOR 259 42 TypeIterator
SEPARATOR 259 54 )
SEPARATOR 259 55 )
SEPARATOR 259 56 ;
KEYWORLD 260 2 if
SEPARATOR 260 4 (
IDENTIFICATOR 260 5 iterator
OPERATOR 260 14 ==
IDENTIFICATOR 260 17 NULL
SEPARATOR 260 21 )
KEYWORLD 261 3 return
SEPARATOR 261 9 (
IDENTIFICATOR 261 10 NULL
SEPARATOR 261 14 )
SEPARATOR 261 15 ;
IDENTIFICATOR 263 2 iterator
OPERATOR 263 10 ->
IDENTIFICATOR 263 12 node
OPERATOR 263 17 =
IDENTIFICATOR 263 19 node
SEPARATOR 263 23 ;
IDENTIFICATOR 264 2 iterator
OPERATOR 264 10 ->
IDENTIFICATOR 264 12 state
OPERATOR 264 18 =
IDENTIFICATOR 264 20 IS_NORMAL
SEPARATOR 264 29 ;
IDENTIFICATOR 265 2 iterator
OPERATOR 265 10 ->
IDENTIFICATOR 265 12 tree
OPERATOR 265 17 =
IDENTIFICATOR 265 19 SEQ
SEPARATOR 265 22 (
IDENTIFICATOR 265 23 handle
SEPARATOR 265 29 )
SEPARATOR 265 30 ;
KEYWORLD 266 2 return
SEPARATOR 266 8 (
IDENTIFICATOR 266 9 iterator
SEPARATOR 266 17 )
SEPARATOR 266 18 ;
SEPARATOR 267 1 }
IDENTIFICATOR 269 1 LSQ_IteratorT
IDENTIFICATOR 270 15 LSQ_GetFrontElement
SEPARATOR 270 34 (
IDENTIFICATOR 270 35 LSQ_HandleT
IDENTIFICATOR 270 47 handle
SEPARATOR 270 53 )
SEPARATOR 270 54 {
KEYWORLD 271 2 return
SEPARATOR 271 8 (
IDENTIFICATOR 271 9 handle
OPERATOR 271 16 !
OPERATOR 271 17 =
IDENTIFICATOR 271 19 NULL
OPERATOR 271 24 &&
IDENTIFICATOR 271 27 SEQ
SEPARATOR 271 30 (
IDENTIFICATOR 271 31 handle
SEPARATOR 271 37 )
OPERATOR 271 38 ->
IDENTIFICATOR 271 40 root
OPERATOR 271 45 !
OPERATOR 271 46 =
IDENTIFICATOR 271 48 NULL
SEPARATOR 271 52 )
OPERATOR 271 53 ?
IDENTIFICATOR 271 55 LSQ_GetElementByIndex
SEPARATOR 271 76 (
IDENTIFICATOR 271 77 handle
SEPARATOR 271 83 ,
SEPARATOR 271 85 (
IDENTIFICATOR 271 86 GetLeftMostNode
SEPARATOR 271 101 (
IDENTIFICATOR 271 102 SEQ
SEPARATOR 271 105 (
IDENTIFICATOR 271 106 handle
SEPARATOR 271 112 )
OPERATOR 271 113 ->
IDENTIFICATOR 271 115 root
SEPARATOR 271 119 )
SEPARATOR 271 120 )
OPERATOR 271 121 ->
IDENTIFICATOR 271 123 key
SEPARATOR 271 126 )
OPERATOR 271 127 :
IDENTIFICATOR 271 129 LSQ_GetPastRearElement
SEPARATOR 271 151 (
IDENTIFICATOR 271 152 handle
SEPARATOR 271 158 )
SEPARATOR 271 159 ;
SEPARATOR 272 1 }
IDENTIFICATOR 274 1 LSQ_IteratorT
IDENTIFICATOR 275 15 LSQ_GetPastRearElement
SEPARATOR 275 37 (
IDENTIFICATOR 275 38 LSQ_HandleT
IDENTIFICATOR 275 50 handle
SEPARATOR 275 56 )
SEPARATOR 275 57 {
IDENTIFICATOR 276 2 TypeIterator
OPERATOR 276 15 *
IDENTIFICATOR 276 16 iterator
OPERATOR 276 25 =
IDENTIFICATOR 276 27 NULL
SEPARATOR 276 31 ;
KEYWORLD 278 2 if
SEPARATOR 278 4 (
IDENTIFICATOR 278 5 handle
OPERATOR 278 12 ==
IDENTIFICATOR 278 15 NULL
SEPARATOR 278 19 )
KEYWORLD 279 3 return
SEPARATOR 279 9 (
IDENTIFICATOR 279 10 NULL
SEPARATOR 279 14 )
SEPARATOR 279 15 ;
IDENTIFICATOR 281 2 iterator
OPERATOR 281 11 =
SEPARATOR 281 13 (
IDENTIFICATOR 281 14 TypeIterator
OPERATOR 281 26 *
SEPARATOR 281 27 )
IDENTIFICATOR 281 28 malloc
SEPARATOR 281 34 (
KEYWORLD 281 35 sizeof
SEPARATOR 281 41 (
IDENTIFICATOR 281 42 TypeIterator
SEPARATOR 281 54 )
SEPARATOR 281 55 )
SEPARATOR 281 56 ;
KEYWORLD 282 2 if
SEPARATOR 282 4 (
IDENTIFICATOR 282 5 iterator
OPERATOR 282 14 ==
IDENTIFICATOR 282 17 NULL
SEPARATOR 282 21 )
KEYWORLD 283 3 return
SEPARATOR 283 9 (
IDENTIFICATOR 283 10 NULL
SEPARATOR 283 14 )
SEPARATOR 283 15 ;
IDENTIFICATOR 285 2 iterator
OPERATOR 285 10 ->
IDENTIFICATOR 285 12 node
OPERATOR 285 17 =
IDENTIFICATOR 285 19 NULL
SEPARATOR 285 23 ;
IDENTIFICATOR 286 2 iterator
OPERATOR 286 10 ->
IDENTIFICATOR 286 12 state
OPERATOR 286 18 =
IDENTIFICATOR 286 20 IS_PAST_REAR
SEPARATOR 286 32 ;
IDENTIFICATOR 287 2 iterator
OPERATOR 287 10 ->
IDENTIFICATOR 287 12 tree
OPERATOR 287 17 =
IDENTIFICATOR 287 19 SEQ
SEPARATOR 287 22 (
IDENTIFICATOR 287 23 handle
SEPARATOR 287 29 )
SEPARATOR 287 30 ;
KEYWORLD 288 2 return
SEPARATOR 288 8 (
IDENTIFICATOR 288 9 iterator
SEPARATOR 288 17 )
SEPARATOR 288 18 ;
SEPARATOR 289 1 }
KEYWORLD 291 1 void
IDENTIFICATOR 292 6 LSQ_DestroyIterator
SEPARATOR 292 25 (
IDENTIFICATOR 292 26 LSQ_IteratorT
IDENTIFICATOR 292 40 iterator
SEPARATOR 292 48 )
SEPARATOR 292 49 {
KEYWORLD 293 2 if
SEPARATOR 293 4 (
IDENTIFICATOR 293 5 iterator
OPERATOR 293 14 ==
IDENTIFICATOR 293 17 NULL
SEPARATOR 293 21 )
KEYWORLD 294 3 return
SEPARATOR 294 9 ;
IDENTIFICATOR 295 2 free
SEPARATOR 295 6 (
IDENTIFICATOR 295 7 iterator
SEPARATOR 295 15 )
SEPARATOR 295 16 ;
SEPARATOR 296 1 }
KEYWORLD 298 1 void
IDENTIFICATOR 299 6 LSQ_AdvanceOneElement
SEPARATOR 299 27 (
IDENTIFICATOR 299 28 LSQ_IteratorT
IDENTIFICATOR 299 42 iterator
SEPARATOR 299 50 )
SEPARATOR 299 51 {
IDENTIFICATOR 300 2 TypeNode
OPERATOR 300 11 *
IDENTIFICATOR 300 12 node
OPERATOR 300 17 =
IDENTIFICATOR 300 19 NULL
SEPARATOR 300 23 ,
OPERATOR 300 25 *
IDENTIFICATOR 300 26 pnode
OPERATOR 300 32 =
IDENTIFICATOR 300 34 NULL
SEPARATOR 300 38 ;
KEYWORLD 302 2 if
SEPARATOR 302 4 (
IDENTIFICATOR 302 5 iterator
OPERATOR 302 14 ==
IDENTIFICATOR 302 17 NULL
OPERATOR 302 22 ||
IDENTIFICATOR 302 25 ITR
SEPARATOR 302 28 (
IDENTIFICATOR 302 29 iterator
SEPARATOR 302 37 )
OPERATOR 302 38 ->
IDENTIFICATOR 302 40 tree
OPERATOR 302 45 ==
IDENTIFICATOR 302 48 NULL
OPERATOR 302 53 ||
IDENTIFICATOR 302 56 ITR
SEPARATOR 302 59 (
IDENTIFICATOR 302 60 iterator
SEPARATOR 302 68 )
OPERATOR 302 69 ->
IDENTIFICATOR 302 71 state
OPERATOR 302 77 ==
IDENTIFICATOR 302 80 IS_PAST_REAR
SEPARATOR 302 92 )
KEYWORLD 303 3 return
SEPARATOR 303 9 ;
KEYWORLD 305 2 if
SEPARATOR 305 4 (
IDENTIFICATOR 305 5 ITR
SEPARATOR 305 8 (
IDENTIFICATOR 305 9 iterator
SEPARATOR 305 17 )
OPERATOR 305 18 ->
IDENTIFICATOR 305 20 state
OPERATOR 305 26 ==
IDENTIFICATOR 305 29 IS_BEFOR_FIRST
SEPARATOR 305 43 )
SEPARATOR 305 44 {
KEYWORLD 306 3 if
SEPARATOR 306 5 (
IDENTIFICATOR 306 6 LSQ_GetSize
SEPARATOR 306 17 (
IDENTIFICATOR 306 18 ITR
SEPARATOR 306 21 (
IDENTIFICATOR 306 22 iterator
SEPARATOR 306 30 )
OPERATOR 306 31 ->
IDENTIFICATOR 306 33 tree
SEPARATOR 306 37 )
OPERATOR 306 39 ==
INTEGER 306 42 0
SEPARATOR 306 43 )
IDENTIFICATOR 307 4 ITR
SEPARATOR 307 7 (
IDENTIFICATOR 307 8 iterator
SEPARATOR 307 16 )
OPERATOR 307 17 ->
IDENTIFICATOR 307 19 state
OPERATOR 307 25 =
IDENTIFICATOR 307 27 IS_PAST_REAR
SEPARATOR 307 39 ;
KEYWORLD 308 3 else
SEPARATOR 308 7 {
IDENTIFICATOR 309 4 ITR
SEPARATOR 309 7 (
IDENTIFICATOR 309 8 iterator
SEPARATOR 309 16 )
OPERATOR 309 17 ->
IDENTIFICATOR 309 19 node
OPERATOR 309 24 =
IDENTIFICATOR 309 26 GetLeftMostNode
SEPARATOR 309 41 (
IDENTIFICATOR 309 42 ITR
SEPARATOR 309 45 (
IDENTIFICATOR 309 46 iterator
SEPARATOR 309 54 )
OPERATOR 309 55 ->
IDENTIFICATOR 309 57 tree
OPERATOR 309 61 ->
IDENTIFICATOR 309 63 root
SEPARATOR 309 67 )
SEPARATOR 309 68 ;
IDENTIFICATOR 310 4 ITR
SEPARATOR 310 7 (
IDENTIFICATOR 310 8 iterator
SEPARATOR 310 16 )
OPERATOR 310 17 ->
IDENTIFICATOR 310 19 state
OPERATOR 310 25 =
IDENTIFICATOR 310 27 IS_NORMAL
SEPARATOR 310 36 ;
SEPARATOR 311 3 }
KEYWORLD 312 3 return
SEPARATOR 312 9 ;
SEPARATOR 313 2 }
KEYWORLD 315 2 if
SEPARATOR 315 4 (
IDENTIFICATOR 315 5 ITR
SEPARATOR 315 8 (
IDENTIFICATOR 315 9 iterator
SEPARATOR 315 17 )
OPERATOR 315 18 ->
IDENTIFICATOR 315 20 node
OPERATOR 315 25 ==
IDENTIFICATOR 315 28 NULL
SEPARATOR 315 32 )
KEYWORLD 316 3 return
SEPARATOR 316 9 ;
IDENTIFICATOR 318 2 node
OPERATOR 318 7 =
IDENTIFICATOR 318 9 ITR
SEPARATOR 318 12 (
IDENTIFICATOR 318 13 iterator
SEPARATOR 318 21 )
OPERATOR 318 22 ->
IDENTIFICATOR 318 24 node
SEPARATOR 318 28 ;
IDENTIFICATOR 319 2 pnode
OPERATOR 319 8 =
IDENTIFICATOR 319 10 NULL
SEPARATOR 319 14 ;
KEYWORLD 322 2 if
SEPARATOR 322 4 (
IDENTIFICATOR 322 5 node
OPERATOR 322 9 ->
IDENTIFICATOR 322 11 right
OPERATOR 322 17 !
OPERATOR 322 18 =
IDENTIFICATOR 322 20 NULL
SEPARATOR 322 24 )
IDENTIFICATOR 323 3 ITR
SEPARATOR 323 6 (
IDENTIFICATOR 323 7 iterator
SEPARATOR 323 15 )
OPERATOR 323 16 ->
IDENTIFICATOR 323 18 node
OPERATOR 323 23 =
IDENTIFICATOR 323 25 GetLeftMostNode
SEPARATOR 323 40 (
IDENTIFICATOR 323 41 node
OPERATOR 323 45 ->
IDENTIFICATOR 323 47 right
SEPARATOR 323 52 )
SEPARATOR 323 53 ;
KEYWORLD 324 2 else
KEYWORLD 325 2 if
SEPARATOR 325 4 (
IDENTIFICATOR 325 5 node
OPERATOR 325 9 ->
IDENTIFICATOR 325 11 parent
OPERATOR 325 18 !
OPERATOR 325 19 =
IDENTIFICATOR 325 21 NULL
SEPARATOR 325 25 )
SEPARATOR 325 26 {
KEYWORLD 326 3 if
SEPARATOR 326 5 (
IDENTIFICATOR 326 6 node
OPERATOR 326 10 ->
IDENTIFICATOR 326 12 parent
OPERATOR 326 18 ->
IDENTIFICATOR 326 20 right
OPERATOR 326 26 ==
IDENTIFICATOR 326 29 node
SEPARATOR 326 33 )
SEPARATOR 326 34 {
KEYWORLD 327 4 while
SEPARATOR 327 9 (
IDENTIFICATOR 327 10 node
OPERATOR 327 14 ->
IDENTIFICATOR 327 16 parent
OPERATOR 327 23 !
OPERATOR 327 24 =
IDENTIFICATOR 327 26 NULL
OPERATOR 327 31 &&
IDENTIFICATOR 327 34 node
OPERATOR 327 38 ->
IDENTIFICATOR 327 40 right
OPERATOR 327 46 ==
IDENTIFICATOR 327 49 pnode
SEPARATOR 327 54 )
SEPARATOR 327 55 {
IDENTIFICATOR 328 5 pnode
OPERATOR 328 11 =
IDENTIFICATOR 328 13 node
SEPARATOR 328 17 ;
IDENTIFICATOR 329 5 node
OPERATOR 329 10 =
IDENTIFICATOR 329 12 node
OPERATOR 329 16 ->
IDENTIFICATOR 329 18 parent
SEPARATOR 329 24 ;
SEPARATOR 330 4 }
KEYWORLD 331 4 if
SEPARATOR 331 6 (
IDENTIFICATOR 331 7 node
OPERATOR 331 11 ->
IDENTIFICATOR 331 13 parent
OPERATOR 331 20 ==
IDENTIFICATOR 331 23 NULL
OPERATOR 331 28 &&
IDENTIFICATOR 331 31 node
OPERATOR 331 35 ->
IDENTIFICATOR 331 37 right
OPERATOR 331 43 ==
IDENTIFICATOR 331 46 pnode
SEPARATOR 331 51 )
SEPARATOR 331 52 {
IDENTIFICATOR 332 5 ITR
SEPARATOR 332 8 (
IDENTIFICATOR 332 9 iterator
SEPARATOR 332 17 )
OPERATOR 332 18 ->
IDENTIFICATOR 332 20 node
OPERATOR 332 25 =
IDENTIFICATOR 332 27 NULL
SEPARATOR 332 31 ;
IDENTIFICATOR 333 5 ITR
SEPARATOR 333 8 (
IDENTIFICATOR 333 9 iterator
SEPARATOR 333 17 )
OPERATOR 333 18 ->
IDENTIFICATOR 333 20 state
OPERATOR 333 26 =
IDENTIFICATOR 333 28 IS_PAST_REAR
SEPARATOR 333 40 ;
SEPARATOR 334 4 }
KEYWORLD 335 4 else
IDENTIFICATOR 336 5 ITR
SEPARATOR 336 8 (
IDENTIFICATOR 336 9 iterator
SEPARATOR 336 17 )
OPERATOR 336 18 ->
IDENTIFICATOR 336 20 node
OPERATOR 336 25 =
IDENTIFICATOR 336 27 node
SEPARATOR 336 31 ;
SEPARATOR 337 3 }
KEYWORLD 338 3 else
KEYWORLD 339 4 if
SEPARATOR 339 6 (
IDENTIFICATOR 339 7 node
OPERATOR 339 11 ->
IDENTIFICATOR 339 13 parent
OPERATOR 339 19 ->
IDENTIFICATOR 339 21 left
OPERATOR 339 26 =
IDENTIFICATOR 339 28 node
SEPARATOR 339 32 )
IDENTIFICATOR 340 5 ITR
SEPARATOR 340 8 (
IDENTIFICATOR 340 9 iterator
SEPARATOR 340 17 )
OPERATOR 340 18 ->
IDENTIFICATOR 340 20 node
OPERATOR 340 25 =
IDENTIFICATOR 340 27 node
OPERATOR 340 31 ->
IDENTIFICATOR 340 33 parent
SEPARATOR 340 39 ;
SEPARATOR 341 2 }
KEYWORLD 342 2 else
SEPARATOR 343 2 {
IDENTIFICATOR 344 3 ITR
SEPARATOR 344 6 (
IDENTIFICATOR 344 7 iterator
SEPARATOR 344 15 )
OPERATOR 344 16 ->
IDENTIFICATOR 344 18 node
OPERATOR 344 23 =
IDENTIFICATOR 344 25 NULL
SEPARATOR 344 29 ;
IDENTIFICATOR 345 3 ITR
SEPARATOR 345 6 (
IDENTIFICATOR 345 7 iterator
SEPARATOR 345 15 )
OPERATOR 345 16 ->
IDENTIFICATOR 345 18 state
OPERATOR 345 24 =
IDENTIFICATOR 345 26 IS_PAST_REAR
SEPARATOR 345 38 ;
SEPARATOR 346 2 }
SEPARATOR 347 1 }
KEYWORLD 349 1 void
IDENTIFICATOR 350 6 LSQ_RewindOneElement
SEPARATOR 350 26 (
IDENTIFICATOR 350 27 LSQ_IteratorT
IDENTIFICATOR 350 41 iterator
SEPARATOR 350 49 )
SEPARATOR 350 50 {
IDENTIFICATOR 351 2 TypeNode
OPERATOR 351 11 *
IDENTIFICATOR 351 12 node
OPERATOR 351 17 =
IDENTIFICATOR 351 19 NULL
SEPARATOR 351 23 ,
OPERATOR 351 25 *
IDENTIFICATOR 351 26 pnode
OPERATOR 351 32 =
IDENTIFICATOR 351 34 NULL
SEPARATOR 351 38 ;
KEYWORLD 353 2 if
SEPARATOR 353 4 (
IDENTIFICATOR 353 5 iterator
OPERATOR 353 14 ==
IDENTIFICATOR 353 17 NULL
OPERATOR 353 22 ||
IDENTIFICATOR 353 25 ITR
SEPARATOR 353 28 (
IDENTIFICATOR 353 29 iterator
SEPARATOR 353 37 )
OPERATOR 353 38 ->
IDENTIFICATOR 353 40 tree
OPERATOR 353 45 ==
IDENTIFICATOR 353 48 NULL
OPERATOR 353 53 ||
IDENTIFICATOR 353 56 ITR
SEPARATOR 353 59 (
IDENTIFICATOR 353 60 iterator
SEPARATOR 353 68 )
OPERATOR 353 69 ->
IDENTIFICATOR 353 71 state
OPERATOR 353 77 ==
IDENTIFICATOR 353 80 IS_BEFOR_FIRST
SEPARATOR 353 94 )
KEYWORLD 354 3 return
SEPARATOR 354 9 ;
KEYWORLD 356 2 if
SEPARATOR 356 4 (
IDENTIFICATOR 356 5 ITR
SEPARATOR 356 8 (
IDENTIFICATOR 356 9 iterator
SEPARATOR 356 17 )
OPERATOR 356 18 ->
IDENTIFICATOR 356 20 state
OPERATOR 356 26 ==
IDENTIFICATOR 356 29 IS_PAST_REAR
SEPARATOR 356 41 )
SEPARATOR 356 42 {
KEYWORLD 357 3 if
SEPARATOR 357 5 (
IDENTIFICATOR 357 6 LSQ_GetSize
SEPARATOR 357 17 (
IDENTIFICATOR 357 18 ITR
SEPARATOR 357 21 (
IDENTIFICATOR 357 22 iterator
SEPARATOR 357 30 )
OPERATOR 357 31 ->
IDENTIFICATOR 357 33 tree
SEPARATOR 357 37 )
OPERATOR 357 39 ==
INTEGER 357 42 0
SEPARATOR 357 43 )
IDENTIFICATOR 358 4 ITR
SEPARATOR 358 7 (
IDENTIFICATOR 358 8 iterator
SEPARATOR 358 16 )
OPERATOR 358 17 ->
IDENTIFICATOR 358 19 state
OPERATOR 358 25 =
IDENTIFICATOR 358 27 IS_BEFOR_FIRST
SEPARATOR 358 41 ;
KEYWORLD 359 3 else
SEPARATOR 359 7 {
IDENTIFICATOR 360 4 ITR
SEPARATOR 360 7 (
IDENTIFICATOR 360 8 iterator
SEPARATOR 360 16 )
OPERATOR 360 17 ->
IDENTIFICATOR 360 19 node
OPERATOR 360 24 =
IDENTIFICATOR 360 26 GetRightMostNode
SEPARATOR 360 42 (
IDENTIFICATOR 360 43 ITR
SEPARATOR 360 46 (
IDENTIFICATOR 360 47 iterator
SEPARATOR 360 55 )
OPERATOR 360 56 ->
IDENTIFICATOR 360 58 tree
OPERATOR 360 62 ->
IDENTIFICATOR 360 64 root
SEPARATOR 360 68 )
SEPARATOR 360 69 ;
IDENTIFICATOR 361 4 ITR
SEPARATOR 361 7 (
IDENTIFICATOR 361 8 iterator
SEPARATOR 361 16 )
OPERATOR 361 17 ->
IDENTIFICATOR 361 19 state
OPERATOR 361 25 =
IDENTIFICATOR 361 27 IS_NORMAL
SEPARATOR 361 36 ;
SEPARATOR 362 3 }
KEYWORLD 363 3 return
SEPARATOR 363 9 ;
SEPARATOR 364 2 }
KEYWORLD 366 2 if
SEPARATOR 366 4 (
IDENTIFICATOR 366 5 ITR
SEPARATOR 366 8 (
IDENTIFICATOR 366 9 iterator
SEPARATOR 366 17 )
OPERATOR 366 18 ->
IDENTIFICATOR 366 20 node
OPERATOR 366 25 ==
IDENTIFICATOR 366 28 NULL
SEPARATOR 366 32 )
KEYWORLD 367 3 return
SEPARATOR 367 9 ;
IDENTIFICATOR 369 2 node
OPERATOR 369 7 =
IDENTIFICATOR 369 9 ITR
SEPARATOR 369 12 (
IDENTIFICATOR 369 13 iterator
SEPARATOR 369 21 )
OPERATOR 369 22 ->
IDENTIFICATOR 369 24 node
SEPARATOR 369 28 ;
IDENTIFICATOR 370 2 pnode
OPERATOR 370 8 =
IDENTIFICATOR 370 10 NULL
SEPARATOR 370 14 ;
KEYWORLD 372 2 if
SEPARATOR 372 4 (
IDENTIFICATOR 372 5 node
OPERATOR 372 9 ->
IDENTIFICATOR 372 11 left
OPERATOR 372 16 !
OPERATOR 372 17 =
IDENTIFICATOR 372 19 NULL
SEPARATOR 372 23 )
IDENTIFICATOR 373 3 ITR
SEPARATOR 373 6 (
IDENTIFICATOR 373 7 iterator
SEPARATOR 373 15 )
OPERATOR 373 16 ->
IDENTIFICATOR 373 18 node
OPERATOR 373 23 =
IDENTIFICATOR 373 25 GetRightMostNode
SEPARATOR 373 41 (
IDENTIFICATOR 373 42 node
OPERATOR 373 46 ->
IDENTIFICATOR 373 48 left
SEPARATOR 373 52 )
SEPARATOR 373 53 ;
KEYWORLD 374 2 else
KEYWORLD 375 2 if
SEPARATOR 375 4 (
IDENTIFICATOR 375 5 node
OPERATOR 375 9 ->
IDENTIFICATOR 375 11 parent
OPERATOR 375 18 !
OPERATOR 375 19 =
IDENTIFICATOR 375 21 NULL
SEPARATOR 375 25 )
SEPARATOR 375 26 {
KEYWORLD 376 3 if
SEPARATOR 376 5 (
IDENTIFICATOR 376 6 node
OPERATOR 376 10 ->
IDENTIFICATOR 376 12 parent
OPERATOR 376 18 ->
IDENTIFICATOR 376 20 left
OPERATOR 376 25 ==
IDENTIFICATOR 376 28 node
SEPARATOR 376 32 )
SEPARATOR 376 33 {
KEYWORLD 377 4 while
SEPARATOR 377 9 (
IDENTIFICATOR 377 10 node
OPERATOR 377 14 ->
IDENTIFICATOR 377 16 parent
OPERATOR 377 23 !
OPERATOR 377 24 =
IDENTIFICATOR 377 26 NULL
OPERATOR 377 31 &&
IDENTIFICATOR 377 34 node
OPERATOR 377 38 ->
IDENTIFICATOR 377 40 left
OPERATOR 377 45 ==
IDENTIFICATOR 377 48 pnode
SEPARATOR 377 53 )
SEPARATOR 377 54 {
IDENTIFICATOR 378 5 pnode
OPERATOR 378 11 =
IDENTIFICATOR 378 13 node
SEPARATOR 378 17 ;
IDENTIFICATOR 379 5 node
OPERATOR 379 10 =
IDENTIFICATOR 379 12 node
OPERATOR 379 16 ->
IDENTIFICATOR 379 18 parent
SEPARATOR 379 24 ;
SEPARATOR 380 4 }
KEYWORLD 381 4 if
SEPARATOR 381 6 (
IDENTIFICATOR 381 7 node
OPERATOR 381 11 ->
IDENTIFICATOR 381 13 parent
OPERATOR 381 20 ==
IDENTIFICATOR 381 23 NULL
OPERATOR 381 28 &&
IDENTIFICATOR 381 31 node
OPERATOR 381 35 ->
IDENTIFICATOR 381 37 left
OPERATOR 381 42 ==
IDENTIFICATOR 381 45 pnode
SEPARATOR 381 50 )
SEPARATOR 381 51 {
IDENTIFICATOR 382 5 ITR
SEPARATOR 382 8 (
IDENTIFICATOR 382 9 iterator
SEPARATOR 382 17 )
OPERATOR 382 18 ->
IDENTIFICATOR 382 20 node
OPERATOR 382 25 =
IDENTIFICATOR 382 27 NULL
SEPARATOR 382 31 ;
IDENTIFICATOR 383 5 ITR
SEPARATOR 383 8 (
IDENTIFICATOR 383 9 iterator
SEPARATOR 383 17 )
OPERATOR 383 18 ->
IDENTIFICATOR 383 20 state
OPERATOR 383 26 =
IDENTIFICATOR 383 28 IS_BEFOR_FIRST
SEPARATOR 383 42 ;
SEPARATOR 384 4 }
KEYWORLD 385 4 else
IDENTIFICATOR 386 5 ITR
SEPARATOR 386 8 (
IDENTIFICATOR 386 9 iterator
SEPARATOR 386 17 )
OPERATOR 386 18 ->
IDENTIFICATOR 386 20 node
OPERATOR 386 25 =
IDENTIFICATOR 386 27 node
SEPARATOR 386 31 ;
SEPARATOR 387 3 }
KEYWORLD 388 3 else
KEYWORLD 389 4 if
SEPARATOR 389 6 (
IDENTIFICATOR 389 7 node
OPERATOR 389 11 ->
IDENTIFICATOR 389 13 parent
OPERATOR 389 19 ->
IDENTIFICATOR 389 21 right
OPERATOR 389 27 =
IDENTIFICATOR 389 29 node
SEPARATOR 389 33 )
IDENTIFICATOR 390 5 ITR
SEPARATOR 390 8 (
IDENTIFICATOR 390 9 iterator
SEPARATOR 390 17 )
OPERATOR 390 18 ->
IDENTIFICATOR 390 20 node
OPERATOR 390 25 =
IDENTIFICATOR 390 27 node
OPERATOR 390 31 ->
IDENTIFICATOR 390 33 parent
SEPARATOR 390 39 ;
SEPARATOR 391 2 }
KEYWORLD 392 3 else
SEPARATOR 392 7 {
IDENTIFICATOR 393 4 ITR
SEPARATOR 393 7 (
IDENTIFICATOR 393 8 iterator
SEPARATOR 393 16 )
OPERATOR 393 17 ->
IDENTIFICATOR 393 19 node
OPERATOR 393 24 =
IDENTIFICATOR 393 26 NULL
SEPARATOR 393 30 ;
IDENTIFICATOR 394 4 ITR
SEPARATOR 394 7 (
IDENTIFICATOR 394 8 iterator
SEPARATOR 394 16 )
OPERATOR 394 17 ->
IDENTIFICATOR 394 19 state
OPERATOR 394 25 =
IDENTIFICATOR 394 27 IS_BEFOR_FIRST
SEPARATOR 394 41 ;
SEPARATOR 395 3 }
SEPARATOR 396 1 }
KEYWORLD 398 1 void
IDENTIFICATOR 399 6 LSQ_ShiftPosition
SEPARATOR 399 23 (
IDENTIFICATOR 399 24 LSQ_IteratorT
IDENTIFICATOR 399 38 iterator
SEPARATOR 399 46 ,
IDENTIFICATOR 399 48 LSQ_IntegerIndexT
IDENTIFICATOR 399 66 shift
SEPARATOR 399 71 )
SEPARATOR 399 72 {
KEYWORLD 400 2 if
SEPARATOR 400 4 (
IDENTIFICATOR 400 5 iterator
OPERATOR 400 14 ==
IDENTIFICATOR 400 17 NULL
OPERATOR 400 22 ||
IDENTIFICATOR 400 25 shift
OPERATOR 400 31 ==
INTEGER 400 34 0
SEPARATOR 400 35 )
KEYWORLD 401 3 return
SEPARATOR 401 9 ;
KEYWORLD 402 2 if
SEPARATOR 402 4 (
IDENTIFICATOR 402 5 LSQ_GetSize
SEPARATOR 402 16 (
IDENTIFICATOR 402 17 ITR
SEPARATOR 402 20 (
IDENTIFICATOR 402 21 iterator
SEPARATOR 402 29 )
OPERATOR 402 30 ->
IDENTIFICATOR 402 32 tree
SEPARATOR 402 36 )
OPERATOR 402 38 ==
INTEGER 402 41 0
SEPARATOR 402 42 )
KEYWORLD 403 3 return
SEPARATOR 403 9 ;
KEYWORLD 405 2 if
SEPARATOR 405 4 (
IDENTIFICATOR 405 5 shift
OPERATOR 405 11 >
INTEGER 405 13 0
SEPARATOR 405 14 )
SEPARATOR 405 15 {
KEYWORLD 406 3 for
SEPARATOR 406 6 (
IDENTIFICATOR 406 7 shift
SEPARATOR 406 12 ;
IDENTIFICATOR 406 14 shift
OPERATOR 406 20 >
INTEGER 406 22 0
OPERATOR 406 24 &&
IDENTIFICATOR 406 27 ITR
SEPARATOR 406 30 (
IDENTIFICATOR 406 31 iterator
SEPARATOR 406 39 )
OPERATOR 406 40 ->
IDENTIFICATOR 406 42 state
OPERATOR 406 48 !
OPERATOR 406 49 =
IDENTIFICATOR 406 51 IS_PAST_REAR
SEPARATOR 406 63 ;
IDENTIFICATOR 406 65 shift
OPERATOR 406 70 --
SEPARATOR 406 72 )
IDENTIFICATOR 407 4 LSQ_AdvanceOneElement
SEPARATOR 407 25 (
IDENTIFICATOR 407 26 iterator
SEPARATOR 407 34 )
SEPARATOR 407 35 ;
SEPARATOR 408 2 }
KEYWORLD 409 2 else
SEPARATOR 409 6 {
KEYWORLD 410 3 for
SEPARATOR 410 6 (
IDENTIFICATOR 410 7 shift
SEPARATOR 410 12 ;
IDENTIFICATOR 410 14 shift
OPERATOR 410 20 <
INTEGER 410 22 0
OPERATOR 410 24 &&
IDENTIFICATOR 410 27 ITR
SEPARATOR 410 30 (
IDENTIFICATOR 410 31 iterator
SEPARATOR 410 39 )
OPERATOR 410 40 ->
IDENTIFICATOR 410 42 state
OPERATOR 410 48 !
OPERATOR 410 49 =
IDENTIFICATOR 410 51 IS_BEFOR_FIRST
SEPARATOR 410 65 ;
IDENTIFICATOR 410 67 shift
OPERATOR 410 72 ++
SEPARATOR 410 74 )
IDENTIFICATOR 411 4 LSQ_RewindOneElement
SEPARATOR 411 24 (
IDENTIFICATOR 411 25 iterator
SEPARATOR 411 33 )
SEPARATOR 411 34 ;
SEPARATOR 412 2 }
SEPARATOR 413 1 }
KEYWORLD 415 1 void
IDENTIFICATOR 416 6 LSQ_SetPosition
SEPARATOR 416 21 (
IDENTIFICATOR 416 22 LSQ_IteratorT
IDENTIFICATOR 416 36 iterator
SEPARATOR 416 44 ,
IDENTIFICATOR 416 46 LSQ_IntegerIndexT
IDENTIFICATOR 416 64 pos
SEPARATOR 416 67 )
SEPARATOR 416 68 {
IDENTIFICATOR 417 2 TypeNode
OPERATOR 417 11 *
IDENTIFICATOR 417 12 node
OPERATOR 417 17 =
IDENTIFICATOR 417 19 NULL
SEPARATOR 417 23 ;
KEYWORLD 419 2 if
SEPARATOR 419 4 (
IDENTIFICATOR 419 5 iterator
OPERATOR 419 14 ==
IDENTIFICATOR 419 17 NULL
SEPARATOR 419 21 )
KEYWORLD 420 3 return
SEPARATOR 420 9 ;
KEYWORLD 421 2 if
SEPARATOR 421 4 (
IDENTIFICATOR 421 5 ITR
SEPARATOR 421 8 (
IDENTIFICATOR 421 9 iterator
SEPARATOR 421 17 )
OPERATOR 421 18 ->
IDENTIFICATOR 421 20 tree
OPERATOR 421 25 ==
IDENTIFICATOR 421 28 NULL
OPERATOR 421 33 ||
IDENTIFICATOR 421 36 LSQ_GetSize
SEPARATOR 421 47 (
IDENTIFICATOR 421 48 ITR
SEPARATOR 421 51 (
IDENTIFICATOR 421 52 iterator
SEPARATOR 421 60 )
OPERATOR 421 61 ->
IDENTIFICATOR 421 63 tree
SEPARATOR 421 67 )
SEPARATOR 421 68 )
KEYWORLD 422 3 return
SEPARATOR 422 9 ;
IDENTIFICATOR 423 2 node
OPERATOR 423 7 =
IDENTIFICATOR 423 9 GetNodeByKey
SEPARATOR 423 21 (
IDENTIFICATOR 423 22 ITR
SEPARATOR 423 25 (
IDENTIFICATOR 423 26 iterator
SEPARATOR 423 34 )
OPERATOR 423 35 ->
IDENTIFICATOR 423 37 tree
SEPARATOR 423 41 ,
IDENTIFICATOR 423 43 pos
SEPARATOR 423 46 ,
IDENTIFICATOR 423 48 GET
SEPARATOR 423 51 )
SEPARATOR 423 52 ;
KEYWORLD 424 2 if
SEPARATOR 424 4 (
IDENTIFICATOR 424 5 node
OPERATOR 424 10 ==
IDENTIFICATOR 424 13 NULL
SEPARATOR 424 17 )
KEYWORLD 425 3 return
SEPARATOR 425 9 ;
IDENTIFICATOR 427 2 ITR
SEPARATOR 427 5 (
IDENTIFICATOR 427 6 iterator
SEPARATOR 427 14 )
OPERATOR 427 15 ->
IDENTIFICATOR 427 17 node
OPERATOR 427 22 =
IDENTIFICATOR 427 24 node
SEPARATOR 427 28 ;
IDENTIFICATOR 428 2 ITR
SEPARATOR 428 5 (
IDENTIFICATOR 428 6 iterator
SEPARATOR 428 14 )
OPERATOR 428 15 ->
IDENTIFICATOR 428 17 state
OPERATOR 428 23 =
IDENTIFICATOR 428 25 IS_NORMAL
SEPARATOR 428 34 ;
SEPARATOR 429 1 }
KEYWORLD 431 1 void
IDENTIFICATOR 433 6 LSQ_InsertElement
SEPARATOR 433 23 (
IDENTIFICATOR 433 24 LSQ_HandleT
IDENTIFICATOR 433 36 handle
SEPARATOR 433 42 ,
IDENTIFICATOR 433 44 LSQ_IntegerIndexT
IDENTIFICATOR 433 62 key
SEPARATOR 433 65 ,
IDENTIFICATOR 433 67 LSQ_BaseTypeT
IDENTIFICATOR 433 81 value
SEPARATOR 433 86 )
SEPARATOR 433 87 {
IDENTIFICATOR 434 2 TypeNode
OPERATOR 434 11 *
IDENTIFICATOR 434 12 node
OPERATOR 434 17 =
IDENTIFICATOR 434 19 NULL
SEPARATOR 434 23 ;
KEYWORLD 435 2 if
SEPARATOR 435 4 (
IDENTIFICATOR 435 5 handle
OPERATOR 435 12 ==
IDENTIFICATOR 435 15 NULL
SEPARATOR 435 19 )
KEYWORLD 436 3 return
SEPARATOR 436 9 ;
KEYWORLD 438 2 if
SEPARATOR 438 4 (
IDENTIFICATOR 438 5 LSQ_GetSize
SEPARATOR 438 16 (
IDENTIFICATOR 438 17 handle
SEPARATOR 438 23 )
OPERATOR 438 25 ==
INTEGER 438 28 0
SEPARATOR 438 29 )
SEPARATOR 438 30 {
IDENTIFICATOR 439 3 node
OPERATOR 439 8 =
IDENTIFICATOR 439 10 CreateNode
SEPARATOR 439 20 (
IDENTIFICATOR 439 21 NULL
SEPARATOR 439 25 ,
IDENTIFICATOR 439 26 key
SEPARATOR 439 29 ,
IDENTIFICATOR 439 30 value
SEPARATOR 439 35 )
SEPARATOR 439 36 ;
KEYWORLD 440 3 if
SEPARATOR 440 5 (
IDENTIFICATOR 440 6 node
OPERATOR 440 11 ==
IDENTIFICATOR 440 14 NULL
SEPARATOR 440 18 )
KEYWORLD 441 4 return
SEPARATOR 441 10 ;
IDENTIFICATOR 442 3 node
OPERATOR 442 7 ->
IDENTIFICATOR 442 9 height
OPERATOR 442 16 =
INTEGER 442 18 1
SEPARATOR 442 19 ;
IDENTIFICATOR 443 3 SEQ
SEPARATOR 443 6 (
IDENTIFICATOR 443 7 handle
SEPARATOR 443 13 )
OPERATOR 443 14 ->
IDENTIFICATOR 443 16 root
OPERATOR 443 21 =
IDENTIFICATOR 443 23 node
SEPARATOR 443 27 ;
IDENTIFICATOR 444 3 SEQ
SEPARATOR 444 6 (
IDENTIFICATOR 444 7 handle
SEPARATOR 444 13 )
OPERATOR 444 14 ->
IDENTIFICATOR 444 16 size
OPERATOR 444 20 ++
SEPARATOR 444 22 ;
KEYWORLD 445 3 return
SEPARATOR 445 9 ;
SEPARATOR 446 2 }
IDENTIFICATOR 448 2 node
OPERATOR 448 7 =
IDENTIFICATOR 448 9 GetNodeByKey
SEPARATOR 448 21 (
IDENTIFICATOR 448 22 SEQ
SEPARATOR 448 25 (
IDENTIFICATOR 448 26 handle
SEPARATOR 448 32 )
SEPARATOR 448 33 ,
IDENTIFICATOR 448 35 key
SEPARATOR 448 38 ,
IDENTIFICATOR 448 40 INSERT
SEPARATOR 448 46 )
SEPARATOR 448 47 ;
IDENTIFICATOR 449 2 node
OPERATOR 449 6 ->
IDENTIFICATOR 449 8 value
OPERATOR 449 14 =
IDENTIFICATOR 449 16 value
SEPARATOR 449 21 ;
IDENTIFICATOR 451 2 BalanceTree
SEPARATOR 451 13 (
IDENTIFICATOR 451 14 SEQ
SEPARATOR 451 17 (
IDENTIFICATOR 451 18 handle
SEPARATOR 451 24 )
SEPARATOR 451 25 ,
IDENTIFICATOR 451 27 node
SEPARATOR 451 31 ,
IDENTIFICATOR 451 33 INSERT
SEPARATOR 451 39 )
SEPARATOR 451 40 ;
SEPARATOR 452 1 }
KEYWORLD 454 1 void
IDENTIFICATOR 455 6 LSQ_DeleteFrontElement
SEPARATOR 455 28 (
IDENTIFICATOR 455 29 LSQ_HandleT
IDENTIFICATOR 455 41 handle
SEPARATOR 455 47 )
SEPARATOR 455 48 {
KEYWORLD 456 2 if
SEPARATOR 456 4 (
IDENTIFICATOR 456 5 handle
OPERATOR 456 12 ==
IDENTIFICATOR 456 15 NULL
SEPARATOR 456 19 )
KEYWORLD 457 3 return
SEPARATOR 457 9 ;
IDENTIFICATOR 458 2 LSQ_DeleteElement
SEPARATOR 458 19 (
IDENTIFICATOR 458 20 handle
SEPARATOR 458 26 ,
IDENTIFICATOR 458 29 GetLeftMostNode
SEPARATOR 458 44 (
IDENTIFICATOR 458 45 SEQ
SEPARATOR 458 48 (
IDENTIFICATOR 458 49 handle
SEPARATOR 458 55 )
OPERATOR 458 56 ->
IDENTIFICATOR 458 58 root
SEPARATOR 458 62 )
OPERATOR 458 63 ->
IDENTIFICATOR 458 65 key
SEPARATOR 458 68 )
SEPARATOR 458 69 ;
SEPARATOR 459 1 }
KEYWORLD 461 1 void
IDENTIFICATOR 462 6 LSQ_DeleteRearElement
SEPARATOR 462 27 (
IDENTIFICATOR 462 28 LSQ_HandleT
IDENTIFICATOR 462 40 handle
SEPARATOR 462 46 )
SEPARATOR 462 47 {
KEYWORLD 463 2 if
SEPARATOR 463 4 (
IDENTIFICATOR 463 5 handle
OPERATOR 463 12 ==
IDENTIFICATOR 463 15 NULL
SEPARATOR 463 19 )
KEYWORLD 464 3 return
SEPARATOR 464 9 ;
IDENTIFICATOR 465 2 LSQ_DeleteElement
SEPARATOR 465 19 (
IDENTIFICATOR 465 20 handle
SEPARATOR 465 26 ,
SEPARATOR 465 28 (
IDENTIFICATOR 465 29 GetRightMostNode
SEPARATOR 465 45 (
IDENTIFICATOR 465 46 SEQ
SEPARATOR 465 49 (
IDENTIFICATOR 465 50 handle
SEPARATOR 465 56 )
OPERATOR 465 57 ->
IDENTIFICATOR 465 59 root
SEPARATOR 465 63 )
OPERATOR 465 64 ->
IDENTIFICATOR 465 66 key
SEPARATOR 465 69 )
SEPARATOR 465 70 )
SEPARATOR 465 71 ;
SEPARATOR 466 1 }
KEYWORLD 468 1 void
IDENTIFICATOR 469 6 LSQ_DeleteElement
SEPARATOR 469 23 (
IDENTIFICATOR 469 24 LSQ_HandleT
IDENTIFICATOR 469 36 handle
SEPARATOR 469 42 ,
IDENTIFICATOR 469 44 LSQ_IntegerIndexT
IDENTIFICATOR 469 62 key
SEPARATOR 469 65 )
SEPARATOR 469 66 {
IDENTIFICATOR 470 2 TypeNode
OPERATOR 470 11 *
IDENTIFICATOR 470 12 node
OPERATOR 470 17 =
IDENTIFICATOR 470 19 NULL
SEPARATOR 470 23 ,
OPERATOR 470 25 *
IDENTIFICATOR 470 26 pnode
OPERATOR 470 32 =
IDENTIFICATOR 470 34 NULL
SEPARATOR 470 38 ,
OPERATOR 470 40 *
IDENTIFICATOR 470 41 parent
OPERATOR 470 48 =
IDENTIFICATOR 470 50 NULL
SEPARATOR 470 54 ;
KEYWORLD 471 2 if
SEPARATOR 471 4 (
IDENTIFICATOR 471 5 handle
OPERATOR 471 12 ==
IDENTIFICATOR 471 15 NULL
OPERATOR 471 20 ||
IDENTIFICATOR 471 23 LSQ_GetSize
SEPARATOR 471 34 (
IDENTIFICATOR 471 35 handle
SEPARATOR 471 41 )
OPERATOR 471 43 ==
INTEGER 471 46 0
SEPARATOR 471 47 )
KEYWORLD 472 3 return
SEPARATOR 472 9 ;
IDENTIFICATOR 473 2 node
OPERATOR 473 7 =
IDENTIFICATOR 473 9 GetNodeByKey
SEPARATOR 473 21 (
IDENTIFICATOR 473 22 SEQ
SEPARATOR 473 25 (
IDENTIFICATOR 473 26 handle
SEPARATOR 473 32 )
SEPARATOR 473 33 ,
IDENTIFICATOR 473 35 key
SEPARATOR 473 38 ,
IDENTIFICATOR 473 40 GET
SEPARATOR 473 43 )
SEPARATOR 473 44 ;
KEYWORLD 475 2 if
SEPARATOR 475 4 (
IDENTIFICATOR 475 5 node
OPERATOR 475 10 ==
IDENTIFICATOR 475 13 NULL
SEPARATOR 475 17 )
KEYWORLD 476 3 return
SEPARATOR 476 9 ;
IDENTIFICATOR 477 2 parent
OPERATOR 477 9 =
IDENTIFICATOR 477 11 node
OPERATOR 477 15 ->
IDENTIFICATOR 477 17 parent
SEPARATOR 477 23 ;
KEYWORLD 479 2 if
SEPARATOR 479 4 (
IDENTIFICATOR 479 5 node
OPERATOR 479 9 ->
IDENTIFICATOR 479 11 left
OPERATOR 479 16 !
OPERATOR 479 17 =
IDENTIFICATOR 479 19 NULL
OPERATOR 479 24 &&
IDENTIFICATOR 479 27 node
OPERATOR 479 31 ->
IDENTIFICATOR 479 33 right
OPERATOR 479 39 !
OPERATOR 479 40 =
IDENTIFICATOR 479 42 NULL
SEPARATOR 479 46 )
SEPARATOR 479 47 {
IDENTIFICATOR 480 3 pnode
OPERATOR 480 9 =
IDENTIFICATOR 480 11 GetRightMostNode
SEPARATOR 480 27 (
IDENTIFICATOR 480 28 node
OPERATOR 480 32 ->
IDENTIFICATOR 480 34 left
SEPARATOR 480 38 )
SEPARATOR 480 39 ;
KEYWORLD 481 3 if
SEPARATOR 482 5 (
IDENTIFICATOR 482 6 pnode
OPERATOR 482 11 ->
IDENTIFICATOR 482 13 parent
OPERATOR 482 20 !
OPERATOR 482 21 =
IDENTIFICATOR 482 23 NULL
SEPARATOR 482 27 )
KEYWORLD 483 4 if
SEPARATOR 483 6 (
IDENTIFICATOR 483 7 pnode
OPERATOR 483 12 ->
IDENTIFICATOR 483 14 parent
OPERATOR 483 20 ->
IDENTIFICATOR 483 22 left
OPERATOR 483 27 ==
IDENTIFICATOR 483 30 pnode
SEPARATOR 483 35 )
KEYWORLD 484 5 if
SEPARATOR 484 7 (
IDENTIFICATOR 484 8 pnode
OPERATOR 484 13 ->
IDENTIFICATOR 484 15 left
OPERATOR 484 20 !
OPERATOR 484 21 =
IDENTIFICATOR 484 23 NULL
SEPARATOR 484 27 )
SEPARATOR 484 28 {
IDENTIFICATOR 485 6 pnode
OPERATOR 485 11 ->
IDENTIFICATOR 485 13 parent
OPERATOR 485 19 ->
IDENTIFICATOR 485 21 left
OPERATOR 485 26 =
IDENTIFICATOR 485 28 pnode
OPERATOR 485 33 ->
IDENTIFICATOR 485 35 left
SEPARATOR 485 39 ;
IDENTIFICATOR 486 6 pnode
OPERATOR 486 11 ->
IDENTIFICATOR 486 13 left
OPERATOR 486 17 ->
IDENTIFICATOR 486 19 parent
OPERATOR 486 26 =
IDENTIFICATOR 486 28 pnode
OPERATOR 486 33 ->
IDENTIFICATOR 486 35 parent
SEPARATOR 486 41 ;
SEPARATOR 487 5 }
KEYWORLD 488 5 else
IDENTIFICATOR 489 6 pnode
OPERATOR 489 11 ->
IDENTIFICATOR 489 13 parent
OPERATOR 489 19 ->
IDENTIFICATOR 489 21 left
OPERATOR 489 26 =
IDENTIFICATOR 489 28 NULL
SEPARATOR 489 32 ;
KEYWORLD 490 4 else
KEYWORLD 491 5 if
SEPARATOR 491 7 (
IDENTIFICATOR 491 8 pnode
OPERATOR 491 13 ->
IDENTIFICATOR 491 15 left
OPERATOR 491 20 !
OPERATOR 491 21 =
IDENTIFICATOR 491 23 NULL
SEPARATOR 491 27 )
SEPARATOR 491 28 {
IDENTIFICATOR 492 6 pnode
OPERATOR 492 11 ->
IDENTIFICATOR 492 13 parent
OPERATOR 492 19 ->
IDENTIFICATOR 492 21 right
OPERATOR 492 27 =
IDENTIFICATOR 492 29 pnode
OPERATOR 492 34 ->
IDENTIFICATOR 492 36 left
SEPARATOR 492 40 ;
IDENTIFICATOR 493 6 pnode
OPERATOR 493 11 ->
IDENTIFICATOR 493 13 left
OPERATOR 493 17 ->
IDENTIFICATOR 493 19 parent
OPERATOR 493 26 =
IDENTIFICATOR 493 28 pnode
OPERATOR 493 33 ->
IDENTIFICATOR 493 35 parent
SEPARATOR 493 41 ;
SEPARATOR 494 5 }
KEYWORLD 495 5 else
IDENTIFICATOR 496 6 pnode
OPERATOR 496 11 ->
IDENTIFICATOR 496 13 parent
OPERATOR 496 19 ->
IDENTIFICATOR 496 21 right
OPERATOR 496 27 =
IDENTIFICATOR 496 29 NULL
SEPARATOR 496 33 ;
KEYWORLD 497 3 else
SEPARATOR 497 7 {
IDENTIFICATOR 498 4 pnode
OPERATOR 498 9 ->
IDENTIFICATOR 498 11 parent
OPERATOR 498 18 =
IDENTIFICATOR 498 20 NULL
SEPARATOR 498 24 ;
IDENTIFICATOR 499 4 SEQ
SEPARATOR 499 7 (
IDENTIFICATOR 499 8 handle
SEPARATOR 499 14 )
OPERATOR 499 15 ->
IDENTIFICATOR 499 17 root
OPERATOR 499 22 =
IDENTIFICATOR 499 24 pnode
SEPARATOR 499 29 ;
SEPARATOR 500 3 }
IDENTIFICATOR 502 3 node
OPERATOR 502 7 ->
IDENTIFICATOR 502 9 key
OPERATOR 502 13 =
IDENTIFICATOR 502 15 pnode
OPERATOR 502 20 ->
IDENTIFICATOR 502 22 key
SEPARATOR 502 25 ;
IDENTIFICATOR 503 3 node
OPERATOR 503 7 ->
IDENTIFICATOR 503 9 value
OPERATOR 503 15 =
IDENTIFICATOR 503 17 pnode
OPERATOR 503 22 ->
IDENTIFICATOR 503 24 value
SEPARATOR 503 29 ;
IDENTIFICATOR 504 3 free
SEPARATOR 504 7 (
IDENTIFICATOR 504 8 pnode
SEPARATOR 504 13 )
SEPARATOR 504 14 ;
SEPARATOR 505 2 }
KEYWORLD 506 2 else
KEYWORLD 507 3 if
SEPARATOR 507 5 (
IDENTIFICATOR 507 6 node
OPERATOR 507 10 ->
IDENTIFICATOR 507 12 left
OPERATOR 507 17 ==
IDENTIFICATOR 507 20 NULL
OPERATOR 507 25 &&
IDENTIFICATOR 507 28 node
OPERATOR 507 32 ->
IDENTIFICATOR 507 34 right
OPERATOR 507 40 ==
IDENTIFICATOR 507 43 NULL
SEPARATOR 507 47 )
SEPARATOR 507 48 {
KEYWORLD 508 4 if
SEPARATOR 508 6 (
IDENTIFICATOR 508 7 node
OPERATOR 508 11 ->
IDENTIFICATOR 508 13 parent
OPERATOR 508 20 !
OPERATOR 508 21 =
IDENTIFICATOR 508 23 NULL
SEPARATOR 508 27 )
KEYWORLD 509 5 if
SEPARATOR 509 7 (
IDENTIFICATOR 509 8 node
OPERATOR 509 12 ->
IDENTIFICATOR 509 14 parent
OPERATOR 509 20 ->
IDENTIFICATOR 509 22 left
OPERATOR 509 27 ==
IDENTIFICATOR 509 30 node
SEPARATOR 509 34 )
IDENTIFICATOR 510 6 node
OPERATOR 510 10 ->
IDENTIFICATOR 510 12 parent
OPERATOR 510 18 ->
IDENTIFICATOR 510 20 left
OPERATOR 510 25 =
IDENTIFICATOR 510 27 NULL
SEPARATOR 510 31 ;
KEYWORLD 511 5 else
IDENTIFICATOR 512 6 node
OPERATOR 512 10 ->
IDENTIFICATOR 512 12 parent
OPERATOR 512 18 ->
IDENTIFICATOR 512 20 right
OPERATOR 512 26 =
IDENTIFICATOR 512 28 NULL
SEPARATOR 512 32 ;
KEYWORLD 513 4 else
IDENTIFICATOR 514 5 SEQ
SEPARATOR 514 8 (
IDENTIFICATOR 514 9 handle
SEPARATOR 514 15 )
OPERATOR 514 16 ->
IDENTIFICATOR 514 18 root
OPERATOR 514 23 =
IDENTIFICATOR 514 25 NULL
SEPARATOR 514 29 ;
IDENTIFICATOR 515 4 free
SEPARATOR 515 8 (
IDENTIFICATOR 515 9 node
SEPARATOR 515 13 )
SEPARATOR 515 14 ;
SEPARATOR 516 3 }
KEYWORLD 517 3 else
KEYWORLD 518 4 if
SEPARATOR 518 6 (
IDENTIFICATOR 518 7 node
OPERATOR 518 11 ->
IDENTIFICATOR 518 13 left
OPERATOR 518 18 ==
IDENTIFICATOR 518 21 NULL
SEPARATOR 518 25 )
SEPARATOR 518 26 {
KEYWORLD 519 5 if
SEPARATOR 519 7 (
IDENTIFICATOR 519 8 node
OPERATOR 519 12 ->
IDENTIFICATOR 519 14 parent
OPERATOR 519 21 !
OPERATOR 519 22 =
IDENTIFICATOR 519 24 NULL
SEPARATOR 519 28 )
SEPARATOR 519 29 {
KEYWORLD 520 6 if
SEPARATOR 520 8 (
IDENTIFICATOR 520 9 node
OPERATOR 520 13 ->
IDENTIFICATOR 520 15 parent
OPERATOR 520 21 ->
IDENTIFICATOR 520 23 left
OPERATOR 520 28 ==
IDENTIFICATOR 520 31 node
SEPARATOR 520 35 )
IDENTIFICATOR 521 7 node
OPERATOR 521 11 ->
IDENTIFICATOR 521 13 parent
OPERATOR 521 19 ->
IDENTIFICATOR 521 21 left
OPERATOR 521 26 =
IDENTIFICATOR 521 28 node
OPERATOR 521 32 ->
IDENTIFICATOR 521 34 right
SEPARATOR 521 39 ;
KEYWORLD 522 6 else
IDENTIFICATOR 523 7 node
OPERATOR 523 11 ->
IDENTIFICATOR 523 13 parent
OPERATOR 523 19 ->
IDENTIFICATOR 523 21 right
OPERATOR 523 27 =
IDENTIFICATOR 523 29 node
OPERATOR 523 33 ->
IDENTIFICATOR 523 35 right
SEPARATOR 523 40 ;
IDENTIFICATOR 524 6 node
OPERATOR 524 10 ->
IDENTIFICATOR 524 12 right
OPERATOR 524 17 ->
IDENTIFICATOR 524 19 parent
OPERATOR 524 26 =
IDENTIFICATOR 524 28 node
OPERATOR 524 32 ->
IDENTIFICATOR 524 34 parent
SEPARATOR 524 40 ;
SEPARATOR 525 5 }
KEYWORLD 526 5 else
SEPARATOR 526 9 {
IDENTIFICATOR 527 6 node
OPERATOR 527 10 ->
IDENTIFICATOR 527 12 right
OPERATOR 527 17 ->
IDENTIFICATOR 527 19 parent
OPERATOR 527 26 =
IDENTIFICATOR 527 28 NULL
SEPARATOR 527 32 ;
IDENTIFICATOR 528 6 SEQ
SEPARATOR 528 9 (
IDENTIFICATOR 528 10 handle
SEPARATOR 528 16 )
OPERATOR 528 17 ->
IDENTIFICATOR 528 19 root
OPERATOR 528 24 =
IDENTIFICATOR 528 26 node
OPERATOR 528 30 ->
IDENTIFICATOR 528 32 right
SEPARATOR 528 37 ;
SEPARATOR 529 5 }
IDENTIFICATOR 530 5 free
SEPARATOR 530 9 (
IDENTIFICATOR 530 10 node
SEPARATOR 530 14 )
SEPARATOR 530 15 ;
SEPARATOR 531 4 }
KEYWORLD 532 4 else
SEPARATOR 532 8 {
KEYWORLD 533 5 if
SEPARATOR 533 7 (
IDENTIFICATOR 533 8 node
OPERATOR 533 12 ->
IDENTIFICATOR 533 14 right
OPERATOR 533 20 ==
IDENTIFICATOR 533 23 NULL
SEPARATOR 533 27 )
KEYWORLD 534 6 if
SEPARATOR 534 8 (
IDENTIFICATOR 534 9 node
OPERATOR 534 13 ->
IDENTIFICATOR 534 15 parent
OPERATOR 534 22 !
OPERATOR 534 23 =
IDENTIFICATOR 534 25 NULL
SEPARATOR 534 29 )
SEPARATOR 534 30 {
KEYWORLD 535 7 if
SEPARATOR 535 9 (
IDENTIFICATOR 535 10 node
OPERATOR 535 14 ->
IDENTIFICATOR 535 16 parent
OPERATOR 535 22 ->
IDENTIFICATOR 535 24 right
OPERATOR 535 30 ==
IDENTIFICATOR 535 33 node
SEPARATOR 535 37 )
IDENTIFICATOR 536 8 node
OPERATOR 536 12 ->
IDENTIFICATOR 536 14 parent
OPERATOR 536 20 ->
IDENTIFICATOR 536 22 right
OPERATOR 536 28 =
IDENTIFICATOR 536 30 node
OPERATOR 536 34 ->
IDENTIFICATOR 536 36 left
SEPARATOR 536 40 ;
KEYWORLD 537 7 else
IDENTIFICATOR 538 8 node
OPERATOR 538 12 ->
IDENTIFICATOR 538 14 parent
OPERATOR 538 20 ->
IDENTIFICATOR 538 22 left
OPERATOR 538 27 =
IDENTIFICATOR 538 29 node
OPERATOR 538 33 ->
IDENTIFICATOR 538 35 left
SEPARATOR 538 39 ;
IDENTIFICATOR 539 7 node
OPERATOR 539 11 ->
IDENTIFICATOR 539 13 left
OPERATOR 539 17 ->
IDENTIFICATOR 539 19 parent
OPERATOR 539 26 =
IDENTIFICATOR 539 28 node
OPERATOR 539 32 ->
IDENTIFICATOR 539 34 parent
SEPARATOR 539 40 ;
SEPARATOR 540 6 }
KEYWORLD 541 6 else
SEPARATOR 541 10 {
IDENTIFICATOR 542 7 node
OPERATOR 542 11 ->
IDENTIFICATOR 542 13 left
OPERATOR 542 17 ->
IDENTIFICATOR 542 19 parent
OPERATOR 542 26 =
IDENTIFICATOR 542 28 NULL
SEPARATOR 542 32 ;
IDENTIFICATOR 543 7 SEQ
SEPARATOR 543 10 (
IDENTIFICATOR 543 11 handle
SEPARATOR 543 17 )
OPERATOR 543 18 ->
IDENTIFICATOR 543 20 root
OPERATOR 543 25 =
IDENTIFICATOR 543 27 node
OPERATOR 543 31 ->
IDENTIFICATOR 543 33 left
SEPARATOR 543 37 ;
SEPARATOR 544 6 }
IDENTIFICATOR 545 5 free
SEPARATOR 545 9 (
IDENTIFICATOR 545 10 node
SEPARATOR 545 14 )
SEPARATOR 545 15 ;
SEPARATOR 546 4 }
IDENTIFICATOR 547 2 SEQ
SEPARATOR 547 5 (
IDENTIFICATOR 547 6 handle
SEPARATOR 547 12 )
OPERATOR 547 13 ->
IDENTIFICATOR 547 15 size
OPERATOR 547 19 --
SEPARATOR 547 21 ;
KEYWORLD 548 2 if
SEPARATOR 548 4 (
IDENTIFICATOR 548 5 parent
OPERATOR 548 12 ==
IDENTIFICATOR 548 15 NULL
SEPARATOR 548 19 )
IDENTIFICATOR 549 3 BalanceTree
SEPARATOR 549 14 (
IDENTIFICATOR 549 15 SEQ
SEPARATOR 549 18 (
IDENTIFICATOR 549 19 handle
SEPARATOR 549 25 )
SEPARATOR 549 26 ,
IDENTIFICATOR 549 28 SEQ
SEPARATOR 549 31 (
IDENTIFICATOR 549 32 handle
SEPARATOR 549 38 )
OPERATOR 549 39 ->
IDENTIFICATOR 549 41 root
SEPARATOR 549 45 ,
IDENTIFICATOR 549 47 DELETE
SEPARATOR 549 53 )
SEPARATOR 549 54 ;
KEYWORLD 550 2 else
IDENTIFICATOR 551 3 BalanceTree
SEPARATOR 551 14 (
IDENTIFICATOR 551 15 SEQ
SEPARATOR 551 18 (
IDENTIFICATOR 551 19 handle
SEPARATOR 551 25 )
SEPARATOR 551 26 ,
IDENTIFICATOR 551 28 parent
SEPARATOR 551 34 ,
IDENTIFICATOR 551 36 DELETE
SEPARATOR 551 42 )
SEPARATOR 551 43 ;
SEPARATOR 552 1 }
EOF 553 1 
